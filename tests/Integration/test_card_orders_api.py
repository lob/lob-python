"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: lob-openapi@lob.com
    Generated by: https://openapi-generator.tech
"""


from email.headerregistry import Address
import unittest
import warnings
import datetime

import lob_python
import os
from dotenv import load_dotenv
from dateutil.parser import *
from lob_python.api.cards_api import CardsApi  # noqa: E501
from lob_python.api.card_orders_api import CardOrdersApi  # noqa: E501
from lob_python.model.card_editable import CardEditable  # noqa: E501
from lob_python.model.card_order_editable import CardOrderEditable  # noqa: E501

class TestCardsApi(unittest.TestCase):
    """CardsApi unit test stubs"""

    @classmethod
    def setUpClass(self):
        load_dotenv()
        warnings.simplefilter("ignore", ResourceWarning)
        self.card_ids = []
        self.configuration = lob_python.Configuration(
            username = os.getenv('LOB_API_TEST_KEY')
        )
        with lob_python.ApiClient(self.configuration) as self.api_client:
            self.cards_api = CardsApi(self.api_client)  # noqa: E501

        with lob_python.ApiClient(self.configuration) as self.api_client:
            self.api = CardOrdersApi(self.api_client)  # noqa: E501

        self.card_editable  = CardEditable(
            front = "https://s3-us-west-2.amazonaws.com/public.lob.com/assets/card_horizontal.pdf",
            back = "https://s3-us-west-2.amazonaws.com/public.lob.com/assets/card_horizontal.pdf",
            size = "2.125x3.375"
        )

        self.created_card = self.cards_api.create(self.card_editable)

        self.card = self.created_card.id

        self.card_order_editable  = CardOrderEditable(
            quantity = 10000
        )

        self.card_order_editable2 = CardOrderEditable(
            quantity = 10001
        )

    @classmethod
    def tearDownClass(self):
        del self.card_editable
        del self.created_card
        del self.card_order_editable
        del self.card_order_editable2
        del self.api
        del self.card_ids

        self.cards_api.delete(self.card)
        del self.cards_api
        del self.configuration

    def test_instantiate401(self):
        """Test case for create

        create  # noqa: E501
        """
        bad_config = lob_python.Configuration(
            username = "FAKE KEY MWAHAHA"
        )
        with self.assertRaises(Exception) as context:
            with lob_python.ApiClient(bad_config) as self.api_client:
                bad_api = CardOrdersApi(self.api_client)  # noqa: E501
                bad_api.get(self.card, limit=2)
        self.assertTrue("Your API key is not valid" in context.exception.__str__())

    def test_create200(self):
        """Test case for create

        create  # noqa: E501
        """
        created_card_order = self.api.create(self.card, self.card_order_editable)
        self.assertIsNotNone(created_card_order.id)

    @unittest.skip("Skipping until bug resolved")
    def test_create422_below_min_quantity(self):
        """Test case for create

        create  # noqa: E501
        """
        card_order_editable  = CardOrderEditable(
            quantity = 1
        )
        with self.assertRaises(Exception) as context:
            self.api.create(self.card, self.card_order_editable)
        self.assertTrue("Number of cards in order must be at least" in context.exception.__str__())

    def test_get200(self):
        """Test case for list

        list  # noqa: E501
        """

        card_order_editable3 = CardOrderEditable(
            quantity = 10002
        )

        self.api.create(self.card, self.card_order_editable)
        self.api.create(self.card, self.card_order_editable2)
        self.api.create(self.card, card_order_editable3)
        listed_cos = self.api.get(self.card, limit=2, offset=1)
        self.assertLessEqual(len(listed_cos.data), 2)
        self.assertIsNotNone(listed_cos.data[0]['id'])

    def test_get404(self):
        """Test case for list

        list  # noqa: E501
        """
        with self.assertRaises(Exception) as context:
            self.api.get("card_fake", limit=2)
        self.assertTrue("card not found" in context.exception.__str__())

    def test_get422(self):
        """Test case for list

        list  # noqa: E501
        """

        self.api.create(self.card, self.card_order_editable)
        self.api.create(self.card, self.card_order_editable2)
        with self.assertRaises(Exception) as context:
            self.api.get(self.card, limit=1000001)
        self.assertTrue("Invalid value for `limit`" in context.exception.__str__())


if __name__ == '__main__':
    unittest.main()
