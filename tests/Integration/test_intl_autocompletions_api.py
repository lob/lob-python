"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: lob-openapi@lob.com
    Generated by: https://openapi-generator.tech
"""


import unittest
import warnings

import lob_python
import os
from dotenv import load_dotenv
from lob_python.api.intl_autocompletions_api import IntlAutocompletionsApi
from lob_python.model.intl_autocompletions_writable import IntlAutocompletionsWritable  # noqa: E501
from lob_python.model.country_extended import CountryExtended  # noqa: E501

class TestIntlAutocompletionsApi(unittest.TestCase):
    """IntlAutocompletionsApi unit test stubs"""

    @classmethod
    def setUpClass(self):
        self.api = IntlAutocompletionsApi()  # noqa: E501
        load_dotenv()
        warnings.simplefilter("ignore", ResourceWarning)
        self.configuration = lob_python.Configuration(
            username = os.getenv('LOB_API_LIVE_KEY')
        )
        with lob_python.ApiClient(self.configuration) as self.api_client:
            self.api = IntlAutocompletionsApi(self.api_client)  # noqa: E501
        self.valid_address = IntlAutocompletionsWritable(
            address_prefix = "370 W",
            city = "SUMMERSIDE",
            country = CountryExtended("CA")
        )

    @classmethod
    def tearDownClass(self):
        del self.valid_address
        del self.api
        del self.configuration

    def test_401(self):
        """Test case for autocomplete with status code 401"""
        configuration = lob_python.Configuration(
            username = "Totally fake key"
        )
        with lob_python.ApiClient(configuration) as api_client:
            invalid_api = IntlAutocompletionsApi(api_client)  # noqa: E501

        with self.assertRaises(Exception) as context:
            invalid_api.autocomplete(self.valid_address)
        self.assertTrue("Your API key is not valid" in context.exception.__str__())

    def test_intl_autocompletion200(self):
        """Test case for autocomplete

        autocomplete  # noqa: E501
        """
        autocompleted = self.api.autocomplete(self.valid_address)
        self.assertGreaterEqual(len(autocompleted.suggestions), 0)

    def test_intl_autocompletion_test_key_200(self):
        """Test case for autocomplete with test keys

        autocomplete  # noqa: E501
        """
        configuration = lob_python.Configuration(
            username = os.getenv('LOB_API_TEST_KEY')
        )
        with lob_python.ApiClient(configuration) as api_client:
            api = IntlAutocompletionsApi(api_client)  # noqa: E501
        autocompleted = api.autocomplete(self.valid_address)
        self.assertEqual(autocompleted.suggestions[0]['primary_line'], "TEST KEYS DO NOT AUTOCOMPLETE INTL ADDRESSES")

    def test_intl_autocompletion422(self):
        """Test case for autocomplete error

        autocomplete  # noqa: E501
        """
        error_address = IntlAutocompletionsWritable(
            address_prefix = "370 W",
            city = "SUMMERSIDE",
            state = "PRINCE EDWARD ISLAND",
            zip_code = "C1N 1C4",
            country = CountryExtended("CA"),
            potato = "yes please"
        )
        with self.assertRaises(Exception) as context:
            self.api.autocomplete(error_address)
        self.assertTrue("potato is not allowed" in context.exception.__str__())


if __name__ == '__main__':
    unittest.main()
