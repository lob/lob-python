"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: lob-openapi@lob.com
    Generated by: https://openapi-generator.tech
"""


from email.headerregistry import Address
import string
import unittest
import warnings
import datetime

import lob_python
import os
from dotenv import load_dotenv
from dateutil.parser import *
from lob_python.api.cards_api import CardsApi  # noqa: E501
from lob_python.api.card_orders_api import CardOrdersApi  # noqa: E501
from lob_python.api.letters_api import LettersApi  # noqa: E501
from lob_python.model.address_editable import AddressEditable  # noqa: E501
from lob_python.model.card_editable import CardEditable  # noqa: E501
from lob_python.model.card_updatable import CardUpdatable  # noqa: E501
from lob_python.model.letter_editable import LetterEditable  # noqa: E501
from lob_python.model.card_order_editable import CardOrderEditable  # noqa: E501

class TestCardsApi(unittest.TestCase):
    """CardsApi unit test stubs"""

    @classmethod
    def setUpClass(self):
        load_dotenv()
        warnings.simplefilter("ignore", ResourceWarning)
        self.card_ids = []
        self.configuration = lob_python.Configuration(
            username = os.getenv('LOB_API_TEST_KEY')
        )
        with lob_python.ApiClient(self.configuration) as self.api_client:
            self.api = CardsApi(self.api_client)  # noqa: E501

        self.card_editable  = CardEditable(
            front = "https://s3-us-west-2.amazonaws.com/public.lob.com/assets/card_horizontal.pdf",
            back = "https://s3-us-west-2.amazonaws.com/public.lob.com/assets/card_horizontal.pdf",
            size = "2.125x3.375"
        )

        self.editable_card2 = CardEditable(
            front = "https://s3-us-west-2.amazonaws.com/public.lob.com/assets/card_horizontal.pdf",
            back = "https://s3-us-west-2.amazonaws.com/public.lob.com/assets/card_horizontal.pdf",
            size = "2.125x3.375"
        )

    @classmethod
    def tearDownClass(self):
        for i in self.card_ids:
            self.api.delete(i)
        del self.card_editable
        del self.editable_card2
        del self.api
        # del self.card_orders_api
        # del self.letters_api
        # del self.ltr_id
        del self.configuration
        del self.card_ids

    def tearDown(self):
        # self.letters_api.cancel(self.ltr_id)
        for i in self.card_ids:
            self.api.delete(i)
        pass

    def test_create200(self):
        """Test case for create

        create  # noqa: E501
        """
        created_card = self.api.create(self.card_editable)
        self.card_ids.append(created_card.id)
        self.assertIsNotNone(created_card.id)

    def test_get200(self):
        """Test case for get

        get  # noqa: E501
        """
        created_card = self.api.create(self.card_editable)
        retrieved_card = self.api.get(created_card.id)
        self.card_ids.append(created_card.id)
        self.assertIsNotNone(retrieved_card.id)
        self.assertEqual(retrieved_card.id, created_card.id)

    def test_get404(self):
        """Test case for get

        get  # noqa: E501
        """
        with self.assertRaises(Exception) as context:
            self.api.get("card_fake")
        self.assertTrue("card not found" in context.exception.__str__())

    def test_update200(self):
        """Test case for update

        update  # noqa: E501
        """
        updatable_card = CardUpdatable(
            description = "Updated card"
        )
        created_card = self.api.create(self.card_editable)
        updated = self.api.update(created_card.id, updatable_card)
        self.card_ids.append(updated.id)
        self.assertIsNotNone(updated.id)
        self.assertEqual(updated.description, "Updated card")

    def test_update404(self):
        """Test case for update

        update  # noqa: E501
        """
        updatable_card = CardUpdatable(
            description = "Updated card"
        )
        with self.assertRaises(Exception) as context:
            self.api.update("card_fakeId", updatable_card)
        self.assertTrue("card not found" in context.exception.__str__())

    def test_list200(self):
        """Test case for list

        list  # noqa: E501
        """

        editable_card3 = CardEditable(
            front = "https://s3-us-west-2.amazonaws.com/public.lob.com/assets/card_horizontal.pdf",
            back = "https://s3-us-west-2.amazonaws.com/public.lob.com/assets/card_horizontal.pdf",
            size = "2.125x3.375"
        )

        card_1 = self.api.create(self.card_editable)
        card_2 = self.api.create(self.editable_card2)
        card_3 = self.api.create(editable_card3)
        self.card_ids.append(card_1.id)
        self.card_ids.append(card_2.id)
        self.card_ids.append(card_3.id)
        listed_cards = self.api.list(limit=2) # include=["total_count"] -- to be added after SDK regeneration
        self.assertLessEqual(len(listed_cards.data), 2)
        self.assertIsNotNone(listed_cards.data[0]['id'])
        # self.assertIsNotNone(listed_cards["total_count"])
        next = listed_cards.getNextPageToken()

        # perform test with after query param
        if next:
            listed_cards_after = self.api.list(limit=2, after=next)
            self.assertEqual(len(listed_cards_after.data), 2)
            self.assertIsNotNone(listed_cards_after.data[0]['id'])
            prev = listed_cards_after.getPreviousPageToken()
            if prev:
                listed_cards_before = self.api.list(limit=2, before=prev)
                self.assertLessEqual(len(listed_cards_before.data), 2)
                self.assertIsNotNone(listed_cards_before.data[0]['id'])

    def test_list422(self):
        """Test case for list

        list  # noqa: E501
        """

        card_1 = self.api.create(self.card_editable)
        card_2 = self.api.create(self.editable_card2)
        self.card_ids.append(card_1.id)
        self.card_ids.append(card_2.id)
        with self.assertRaises(Exception) as context:
            self.api.list(limit=101)
        self.assertTrue("Invalid value for `limit`" in context.exception.__str__())

    def test_delete200(self):
        """Test case for delete

        delete  # noqa: E501
        """
        created_card = self.api.create(self.card_editable)
        deleted_card = self.api.delete(created_card.id)
        self.assertEqual(deleted_card.deleted, True)

    def test_delete404(self):
        """Test case for delete

        delete  # noqa: E501
        """
        with self.assertRaises(Exception) as context:
            self.api.delete("card_fake")
        self.assertTrue("card not found" in context.exception.__str__())

    @unittest.skip("Skipping until bug resolved")
    def test_delete422_in_scheduled_letter(self):
        """Test case for delete

        delete  # noqa: E501
        """
        with self.assertRaises(Exception) as context:
            self.api.delete(self.card_ids[0])
        self.assertTrue("Card can not be deleted if it will be used in a scheduled letter" in context.exception.__str__())

if __name__ == '__main__':
    unittest.main()
