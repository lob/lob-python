"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: lob-openapi@lob.com
    Generated by: https://openapi-generator.tech
"""

import string
import unittest
import warnings

import lob_python
from lob_python.api.cards_api import CardsApi  # noqa: E501
from lob_python.model.card_editable import CardEditable
from lob_python.model.card_updatable import CardUpdatable
from lob_python.model.sort_by5 import SortBy5
from lob_python.exceptions import UnauthorizedException, NotFoundException, ApiException
from unittest.mock import Mock, MagicMock

class TestCardsApi(unittest.TestCase):
    """CardsApi unit test stubs"""

    def setUp(self):
        warnings.simplefilter("ignore", ResourceWarning)
        self.config_for_unit = lob_python.Configuration(
            username = "Totally Fake Key"
        )
        with lob_python.ApiClient(self.config_for_unit) as self.api_client:
            self.mock_api = CardsApi(self.api_client)

        self.card_editable = CardEditable(
            front = "fake front",
            back = "fake back",
            size = CardEditable.allowed_values[('size',)]["2.125X3.375"],
            description = "fake description",
        )

        self.card_updatable = CardUpdatable(
            description = "Awesome card",
            auto_reorder = True,
            reorder_quantity = 10000.0
        )

        self.mock_list_of_cards = MagicMock(return_value={
            "data": [{ "id": "fake 1" }, { "id": "fake 2" }]
        })

    def test_card_create_error_handle(self):
        """Test case for handling create error"""
        self.mock_api.card_create = Mock(side_effect=UnauthorizedException(status=401, reason="Unauthorized"))

        with self.assertRaises(Exception) as context:
            self.mock_api.card_create(self.card_editable)
        self.assertTrue("Unauthorized" in context.exception.__str__())

    def test_card_create(self):
        """Test case for creating new card"""
        self.mock_api.card_create = MagicMock(return_value={
            "id": "card_fakeId"
        })
        created_card = self.mock_api.card_create(self.card_editable)
        self.assertIsNotNone(created_card)
        self.assertIsNotNone(created_card["id"])

    def test_card_create_with_custom_headers(self):
        """Test case for creating new card with custom headers"""
        self.mock_api.card_create = MagicMock(return_value={
            "id": "card_fakeId"
        })
        created_card = self.mock_api.card_create(self.card_editable, _content_type="application/json")
        self.assertIsNotNone(created_card)
        self.assertIsNotNone(created_card["id"])

    def test_card_retrieve(self):
        """Test case for retrieving card"""
        self.mock_api.card_retrieve = MagicMock(return_value={
            "id": "card_differentFakeId"
        })
        retrieved_card = self.mock_api.card_retrieve("card_fakeId")
        self.assertEqual(retrieved_card["id"], "card_differentFakeId")

    def test_card_retrieve_with_custom_headers(self):
        """Test case for retrieving card with custom headers"""
        self.mock_api.card_retrieve = MagicMock(return_value={
            "id": "card_differentFakeId"
        })
        retrieved_card = self.mock_api.card_retrieve("card_fakeId", _content_type="application/json")
        self.assertEqual(retrieved_card["id"], "card_differentFakeId")

    def test_card_retrieve_error_handle(self):
        """Test case for handling retrieve error"""
        self.mock_api.card_retrieve = Mock(side_effect=NotFoundException(status=404, reason="Not Found"))

        with self.assertRaises(Exception) as context:
            self.mock_api.card_retrieve("card_fakeId")
        self.assertTrue("Not Found" in context.exception.__str__())

    def test_cards_list(self):
        """Test case for listing cards"""
        self.mock_api.cards_list = self.mock_list_of_cards
        cards = self.mock_api.cards_list()
        self.assertIsNotNone(cards)
        self.assertIsNotNone(cards["data"], 2)

    def test_cards_list_with_custom_headers(self):
        """Test case for listing cards with custom headers"""
        self.mock_api.cards_list = self.mock_list_of_cards
        cards = self.mock_api.cards_list(_content_type="application/json")
        self.assertIsNotNone(cards)
        self.assertIsNotNone(cards["data"], 2)

    def test_cards_list_error_handle(self):
        """Test case for handling list error"""
        msg = """Cannot prepare a request message for provided
                 arguments. Please check that your arguments match
                 declared content type."""
        self.mock_api.cards_list = Mock(side_effect=ApiException(status=0, reason=msg))

        with self.assertRaises(Exception) as context:
            self.mock_api.cards_list()
        self.assertTrue("Cannot prepare a request message" in context.exception.__str__())

    def test_cards_list_with_limit_param(self):
        """Test case for listing card with limit parameter"""
        self.mock_api.cards_list = self.mock_list_of_cards
        cards = self.mock_api.cards_list(limit=10)
        self.assertIsNotNone(cards)
        self.assertIsNotNone(cards["data"], 2)

    def test_cards_list_with_before_param(self):
        """Test case for listing card with before parameter"""
        self.mock_api.cards_list = self.mock_list_of_cards
        cards = self.mock_api.cards_list(before="before")
        self.assertIsNotNone(cards)
        self.assertIsNotNone(cards["data"], 2)

    def test_cards_list_with_after_param(self):
        """Test case for listing card with after parameter"""
        self.mock_api.cards_list = self.mock_list_of_cards
        cards = self.mock_api.cards_list(after="after")
        self.assertIsNotNone(cards)
        self.assertIsNotNone(cards["data"], 2)

    def test_cards_list_with_sortby_param(self):
        """Test case for listing card with sort_by parameter"""
        self.mock_api.cards_list = self.mock_list_of_cards
        cards = self.mock_api.cards_list(sort_by=SortBy5(date_created = 'asc'))
        self.assertIsNotNone(cards)
        self.assertIsNotNone(cards["data"], 2)

    def test_card_update(self):
        """Test case for updating card"""
        self.mock_api.card_update = MagicMock(return_value={
            "id": "card_fakeId",
            "description": self.card_updatable["description"],
            "auto_reorder": self.card_updatable["auto_reorder"],
            "reorder_quantity": self.card_updatable["reorder_quantity"],
        })

        updated_card = self.mock_api.card_update("card_fakeId", self.card_updatable)
        self.assertIsNotNone(updated_card)
        self.assertEqual(updated_card["description"], self.card_updatable["description"])
        self.assertEqual(updated_card["auto_reorder"], self.card_updatable["auto_reorder"])
        self.assertEqual(updated_card["reorder_quantity"], self.card_updatable["reorder_quantity"])

    def test_card_update_with_custom_headers(self):
        """Test case for updating card with custom headers"""
        self.mock_api.card_update = MagicMock(return_value={
            "id": "card_fakeId",
            "description": self.card_updatable["description"],
            "auto_reorder": self.card_updatable["auto_reorder"],
            "reorder_quantity": self.card_updatable["reorder_quantity"],
        })

        updated_card = self.mock_api.card_update("card_fakeId", self.card_updatable, _content_type="application/json")
        self.assertIsNotNone(updated_card)
        self.assertEqual(updated_card["description"], self.card_updatable["description"])
        self.assertEqual(updated_card["auto_reorder"], self.card_updatable["auto_reorder"])
        self.assertEqual(updated_card["reorder_quantity"], self.card_updatable["reorder_quantity"])

    def test_card_update_error_handle(self):
        """Test case for handling update error"""
        self.mock_api.card_update = Mock(side_effect=NotFoundException(status=404, reason="Not Found"))
        with self.assertRaises(Exception) as context:
            self.mock_api.card_update("card_fakeId", self.mock_api.card_update)
        self.assertTrue("Not Found" in context.exception.__str__())

    def test_card_delete(self):
        """Test case for deleting card"""
        self.mock_api.card_delete = MagicMock(return_value={
            "id": "card_fakeId", "deleted": True
        })
        deleted_card = self.mock_api.card_delete("card_fakeId")
        self.assertTrue(deleted_card["deleted"])

    def test_card_delete_with_custom_headers(self):
        """Test case for deleting card"""
        self.mock_api.card_delete = MagicMock(return_value={
            "id": "card_fakeId", "deleted": True
        })
        deleted_card = self.mock_api.card_delete("card_fakeId", _content_type="application/json")
        self.assertTrue(deleted_card["deleted"])

    def test_card_delete_error_handle(self):
        """Test case for handling delete error"""
        self.mock_api.card_delete = Mock(side_effect=NotFoundException(status=404, reason="Not Found"))

        with self.assertRaises(Exception) as context:
            self.mock_api.card_delete("card_fakeId")
        self.assertTrue("Not Found" in context.exception.__str__())

if __name__ == '__main__':
    unittest.main()
