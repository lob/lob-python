"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: lob-openapi@lob.com
    Generated by: https://openapi-generator.tech
"""

import string
import unittest
import warnings

import lob_python
from lob_python.api.intl_verifications_api import IntlVerificationsApi  # noqa: E501
from lob_python.model.intl_verification_writable import IntlVerificationWritable
from lob_python.model.intl_verifications_payload import IntlVerificationsPayload
from lob_python.model.multiple_components_intl import MultipleComponentsIntl
from lob_python.model.country_extended import CountryExtended
from lob_python.exceptions import UnauthorizedException, NotFoundException, ApiException
from unittest.mock import Mock, MagicMock

class TestIntlVerificationsApi(unittest.TestCase):
    """IntlVerificationsApi unit test stubs"""

    def setUp(self):
        warnings.simplefilter("ignore", ResourceWarning)
        self.config_for_unit = lob_python.Configuration(
            username = "Totally Fake Key"
        )
        with lob_python.ApiClient(self.config_for_unit) as self.api_client:
            self.mock_api = IntlVerificationsApi(self.api_client)

        self.address_to_verify = IntlVerificationWritable(
            primary_line = "370 WATER ST",
            postal_code = "C1N 1C4",
            country = CountryExtended("CA"),
        )

        self.addresses_to_verify = IntlVerificationsPayload(
            addresses = [
                MultipleComponentsIntl(
                    primary_line = "370 WATER ST",
                    postal_code = "C1N 1C4",
                    country = CountryExtended("CA"),
                ),
                MultipleComponentsIntl(
                    primary_line = "012 PLACEHOLDER ST",
                    postal_code = "F0O 8A2",
                    country = CountryExtended("CA"),
                ),
            ]
        )

    def test_intl_verification_single_verify_error_handle(self):
        """Test case for handling single verify error"""
        self.mock_api.intl_verification = Mock(side_effect=UnauthorizedException(status=401, reason="Unauthorized"))

        with self.assertRaises(Exception) as context:
            self.mock_api.intl_verification(self.address_to_verify)
        self.assertTrue("Unauthorized" in context.exception.__str__())

    def test_intl_verification_single_verify(self):
        """Test case for verifying single intl address"""
        self.mock_api.intl_verification = MagicMock(return_value={
            "status": "LF1"
        })
        verification = self.mock_api.intl_verification(self.address_to_verify)
        self.assertIsNotNone(verification["status"])
        self.assertEqual(verification["status"], "LF1")

    def test_intl_verification_single_verify_with_custom_headers(self):
        """Test case for verifying single intl address with custom headers"""
        self.mock_api.intl_verification = MagicMock(return_value={
            "status": "LF1"
        })
        verification = self.mock_api.intl_verification(self.address_to_verify, _content_type="application/json")
        self.assertIsNotNone(verification["status"])
        self.assertEqual(verification["status"], "LF1")

    def test_intl_verification_single_verify_with_xLang(self):
        """Test case for verifying single intl address with xlang"""
        self.mock_api.intl_verification = MagicMock(return_value={
            "status": "LF1"
        })
        verification = self.mock_api.intl_verification(self.address_to_verify, x_lang_output="native")
        self.assertIsNotNone(verification["status"])
        self.assertEqual(verification["status"], "LF1")

    def test_intl_verification_bulk_verify_error_handle(self):
        """Test case for handling bulk verify error"""
        self.mock_api.bulk_intl_verifications = Mock(side_effect=UnauthorizedException(status=401, reason="Unauthorized"))

        with self.assertRaises(Exception) as context:
            self.mock_api.bulk_intl_verifications(self.addresses_to_verify)
        self.assertTrue("Unauthorized" in context.exception.__str__())

    def test_intl_verification_bulk_verify(self):
        """Test case for verifying multiple intl addresses"""
        self.mock_api.bulk_intl_verifications = MagicMock(return_value={
            "addresses": [
                { "id": "intl_ver_fakeId", "status": "LF1"},
                { "id": "intl_ver_fakeId", "status": "LF1"},
            ]
        })
        verification = self.mock_api.bulk_intl_verifications(self.addresses_to_verify)
        self.assertIsNotNone(verification)
        self.assertEqual(len(verification["addresses"]), 2)

    def test_intl_verification_bulk_verify_with_custom_headers(self):
        """Test case for verifying multiple intl addresses with custom headers"""
        self.mock_api.bulk_intl_verifications = MagicMock(return_value={
            "addresses": [
                { "id": "intl_ver_fakeId", "status": "LF1"},
                { "id": "intl_ver_fakeId", "status": "LF1"},
            ]
        })
        verification = self.mock_api.bulk_intl_verifications(self.addresses_to_verify, _content_type="application/json")
        self.assertIsNotNone(verification)
        self.assertEqual(len(verification["addresses"]), 2)

if __name__ == '__main__':
    unittest.main()
