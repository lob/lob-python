"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: lob-openapi@lob.com
    Generated by: https://openapi-generator.tech
"""


import string
import unittest
import warnings

import lob_python
import os
from lob_python.api.addresses_api import AddressesApi  # noqa: E501
from lob_python.model.address_editable import AddressEditable  # noqa: E501
from lob_python.model.metadata_model import MetadataModel
from lob_python.model.include_model import IncludeModel
from lob_python.exceptions import UnauthorizedException, NotFoundException, ApiException
from unittest.mock import Mock, MagicMock

class TestAddressesApi(unittest.TestCase):
    """AddressesApi unit test stubs"""

    def setUp(self):
        warnings.simplefilter("ignore", ResourceWarning)
        self.adr_ids = []
        self.config_for_unit = lob_python.Configuration(
            username = "Totally Fake Key"
        )
        with lob_python.ApiClient(self.config_for_unit) as self.api_client:
            self.mock_api = AddressesApi(self.api_client)

        self.address_editable = AddressEditable(
            name = "THING T. THING",
            address_line1 = "1313 CEMETERY LN",
            address_city = "WESTFIELD",
            address_state = "NJ",
            address_zip = "07000"
        )

        self.mock_list_of_addresses =  MagicMock(return_value={
            "data": [{ "id": "fake 1" }, { "id": "fake 2" }]
        })

    def test_create_error_handle(self):
        """Test case for handling create error reported by API"""
        self.mock_api.create = Mock(side_effect=UnauthorizedException(status=401, reason="Unauthorized"))

        with self.assertRaises(Exception) as context:
            self.mock_api.create(self.address_editable)
        self.assertTrue("Unauthorized" in context.exception.__str__())

    def test_create(self):
        """Test case for creating new address"""
        self.mock_api.create = MagicMock(return_value={
            "id": "adr_fakeId"
        })
        created_address = self.mock_api.create(self.address_editable)
        self.assertIsNotNone(created_address)
        self.assertIsNotNone(created_address["id"])

    def test_create_with_custom_headers(self):
        """Test case for creating new address with custom headers"""
        self.mock_api.create = MagicMock(return_value={
            "id": "adr_fakeId"
        })
        created_address = self.mock_api.create(self.address_editable, _content_type="application/json")
        self.assertIsNotNone(created_address)
        self.assertIsNotNone(created_address["id"])

    def test_retrieve(self):
        """Test case for retrieving address"""
        self.mock_api.retrieve = MagicMock(return_value={
            "id": "adr_fakeId"
        })
        retrieved_address = self.mock_api.retrieve("adr_fakeId")
        self.assertEqual(retrieved_address["id"], "adr_fakeId")

    def test_retrieve_with_custom_headers(self):
        """Test case for retrieving address with custom headers"""
        self.mock_api.retrieve = MagicMock(return_value={
            "id": "adr_fakeId"
        })
        retrieved_address = self.mock_api.retrieve("adr_fakeId", _content_type="application/json")
        self.assertEqual(retrieved_address["id"], "adr_fakeId")

    def test_retrieve_error_handle(self):
        """Test case for handling retrieve error reported by API"""
        self.mock_api.retrieve = Mock(side_effect=NotFoundException(status=404, reason="Not Found"))

        with self.assertRaises(Exception) as context:
            self.mock_api.retrieve("adr_fakeId")
        self.assertTrue("Not Found" in context.exception.__str__())

    def test_list(self):
        """Test case for listing addresses"""
        self.mock_api.addresses_list = self.mock_list_of_addresses
        addresses = self.mock_api.addresses_list()
        self.assertIsNotNone(addresses)
        self.assertEqual(len(addresses["data"]), 2)

    def test_list_with_custom_headers(self):
        """Test case for listing addresses with custom headers"""
        self.mock_api.addresses_list = self.mock_list_of_addresses
        addresses = self.mock_api.addresses_list(_content_type="application/json")
        self.assertIsNotNone(addresses)
        self.assertEqual(len(addresses["data"]), 2)

    def test_list_error_handle(self):
        """Test case for handling list error"""
        msg = """Cannot prepare a request message for provided
                 arguments. Please check that your arguments match
                 declared content type."""
        self.mock_api.addresses_list = Mock(side_effect=ApiException(status=0, reason=msg))

        with self.assertRaises(Exception) as context:
            self.mock_api.addresses_list()
        self.assertTrue("Cannot prepare a request message" in context.exception.__str__())

    def test_list_with_limit_param(self):
        """Test case for listing addresses with limit parameter"""
        self.mock_api.addresses_list = self.mock_list_of_addresses
        addresses = self.mock_api.addresses_list(limit=10)
        self.assertIsNotNone(addresses)
        self.assertEqual(len(addresses["data"]), 2)

    def test_list_with_before_param(self):
        """Test case for listing addresses with before parameter"""
        self.mock_api.addresses_list = self.mock_list_of_addresses
        addresses = self.mock_api.addresses_list(before="before")
        self.assertIsNotNone(addresses)
        self.assertEqual(len(addresses["data"]), 2)

    def test_list_with_after_param(self):
        """Test case for listing addresses with after parameter"""
        self.mock_api.addresses_list = self.mock_list_of_addresses
        addresses = self.mock_api.addresses_list(after="after")
        self.assertIsNotNone(addresses)
        self.assertEqual(len(addresses["data"]), 2)

    def test_list_with_include_param(self):
        """Test case for listing addresses with include parameter"""
        self.mock_api.addresses_list = self.mock_list_of_addresses
        addresses = self.mock_api.addresses_list(include=IncludeModel(["total_count"]))
        self.assertIsNotNone(addresses)
        self.assertEqual(len(addresses["data"]), 2)

    def test_list_with_dateCreated_param(self):
        """Test case for listing addresses with date_created parameter"""
        self.mock_api.addresses_list = self.mock_list_of_addresses
        addresses = self.mock_api.addresses_list(date_created={ "gt": "2020-01-01", "lt": "2020-01-31T12" })
        self.assertIsNotNone(addresses)
        self.assertEqual(len(addresses["data"]), 2)

    def test_list_with_metadata_param(self):
        """Test case for listing addresses with metadata parameter"""
        self.mock_api.addresses_list = self.mock_list_of_addresses
        addresses = self.mock_api.addresses_list(metadata=MetadataModel(fakeMetadata = "fakeMetadata"))
        self.assertIsNotNone(addresses)
        self.assertEqual(len(addresses["data"]), 2)

    def test_delete(self):
        """Test case for deleting address"""
        self.mock_api.delete = MagicMock(return_value={
            "id": "adr_fakeId", "deleted": True
        })
        deleted_address = self.mock_api.delete("adr_fakeId")
        self.assertTrue(deleted_address["deleted"])

    def test_delete_with_custom_headers(self):
        """Test case for deleting address"""
        self.mock_api.delete = MagicMock(return_value={
            "id": "adr_fakeId", "deleted": True
        })
        deleted_address = self.mock_api.delete("adr_fakeId", _content_type="application/json")
        self.assertTrue(deleted_address["deleted"])

    def test_delete_error_handle(self):
        """Test case for handling delete error reported by API"""
        self.mock_api.delete = Mock(side_effect=NotFoundException(status=404, reason="Not Found"))

        with self.assertRaises(Exception) as context:
            self.mock_api.delete("adr_fakeId")
        self.assertTrue("Not Found" in context.exception.__str__())

if __name__ == '__main__':
    unittest.main()
