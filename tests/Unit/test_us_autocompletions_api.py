"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: lob-openapi@lob.com
    Generated by: https://openapi-generator.tech
"""

import string
import unittest
import warnings

import lob_python
from lob_python.api.us_autocompletions_api import UsAutocompletionsApi  # noqa: E501
from lob_python.model.us_autocompletions_writable import UsAutocompletionsWritable
from lob_python.exceptions import UnauthorizedException, NotFoundException, ApiException
from unittest.mock import Mock, MagicMock

class TestUsAutocompletionsApi(unittest.TestCase):
    """UsAutocompletionsApi unit test stubs"""

    def setUp(self):
        warnings.simplefilter("ignore", ResourceWarning)
        self.config_for_unit = lob_python.Configuration(
            username = "Totally Fake Key"
        )
        with lob_python.ApiClient(self.config_for_unit) as self.api_client:
            self.mock_api = UsAutocompletionsApi(self.api_client)

        self.us_autocompletions_writable = UsAutocompletionsWritable(
            address_prefix = "fake prefix",
            city = "fake city",
            state = "XX",
            zip_code = "12345",
            geo_ip_sort = False,
        )

    def test_us_autocompletion(self):
        """Test case for US autocompletion"""
        self.mock_api.us_autocompletion = MagicMock(return_value={
            "id": "us_auto_fakeId", "suggestions": [], "object": "us_autocompletion",
        })
        response = self.mock_api.us_autocompletion(self.us_autocompletions_writable)
        self.assertIsNotNone(response["suggestions"])
        self.assertEqual(len(response["suggestions"]), 0)

    def test_us_autocompletion_with_custom_headers(self):
        """Test case for US autocompletion with custom headers"""
        self.mock_api.us_autocompletion = MagicMock(return_value={
            "id": "us_auto_fakeId", "suggestions": [], "object": "us_autocompletion",
        })
        response = self.mock_api.us_autocompletion(self.us_autocompletions_writable, _content_type="application/json")
        self.assertIsNotNone(response["suggestions"])
        self.assertEqual(len(response["suggestions"]), 0)

    def test_us_autocompletion_error_handle(self):
        """Test case for handling US autocompletion error"""
        self.mock_api.us_autocompletion = Mock(side_effect=UnauthorizedException(status=401, reason="Unauthorized"))

        with self.assertRaises(Exception) as context:
            self.mock_api.us_autocompletion(self.us_autocompletions_writable)
        self.assertTrue("Unauthorized" in context.exception.__str__())

if __name__ == '__main__':
    unittest.main()
