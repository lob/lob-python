"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: lob-openapi@lob.com
    Generated by: https://openapi-generator.tech
"""

import unittest
import warnings

import lob_python
from lob_python.api.identity_validation_api import IdentityValidationApi  # noqa: E501
from lob_python.model.multi_line_address import MultiLineAddress
from lob_python.exceptions import UnauthorizedException
from unittest.mock import Mock, MagicMock

class TestIdentityValidationApi(unittest.TestCase):
    """IdentityValidationApi unit test stubs"""

    def setUp(self):
        warnings.simplefilter("ignore", ResourceWarning)
        self.config_for_unit = lob_python.Configuration(
            username = "Totally Fake Key"
        )
        with lob_python.ApiClient(self.config_for_unit) as self.api_client:
            self.mock_api = IdentityValidationApi(self.api_client)

        self.multiline_addr = MultiLineAddress(
            recipient = "fake recipient",
            primary_line = "fake primary line",
            secondary_line = "fake secondary line",
            city = "fake city",
            state = "fake state",
            zip_code = "fake zip"
        )

    def test_identity_validation_validate(self):
        """Test case for validation"""
        self.mock_api.validate = MagicMock(return_value={
            "id": "id_validation_fakeId"
        })
        validation = self.mock_api.validate(self.multiline_addr)
        self.assertIsNotNone(validation)

    def test_identity_validation_validate_with_custom_headers(self):
        """Test case for validation with custom headers"""
        self.mock_api.validate = MagicMock(return_value={
            "id": "id_validation_fakeId"
        })
        validation = self.mock_api.validate(self.multiline_addr, _content_type="application/json")
        self.assertIsNotNone(validation)

    def test_identity_validation_error_handle(self):
        """Test case for handling validate error"""
        self.mock_api.validate = Mock(side_effect=UnauthorizedException(status=401, reason="Unauthorized"))

        with self.assertRaises(Exception) as context:
            self.mock_api.validate(self.multiline_addr)
        self.assertTrue("Unauthorized" in context.exception.__str__())

if __name__ == '__main__':
    unittest.main()
