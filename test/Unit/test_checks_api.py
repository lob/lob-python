"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: lob-openapi@lob.com
    Generated by: https://openapi-generator.tech
"""

import string
import unittest
import warnings

import lob_python
from lob_python.api.checks_api import ChecksApi  # noqa: E501
from lob_python.model.check_editable import CheckEditable
from lob_python.model.mail_type import MailType
from lob_python.model.sort_by3 import SortBy3
from lob_python.model.include_model import IncludeModel
from lob_python.model.metadata_model import MetadataModel
from lob_python.exceptions import UnauthorizedException, NotFoundException, ApiException
from unittest.mock import Mock, MagicMock

class TestChecksApi(unittest.TestCase):
    """ChecksApi unit test stubs"""

    def setUp(self):
        warnings.simplefilter("ignore", ResourceWarning)
        self.config_for_unit = lob_python.Configuration(
            username = "Totally Fake Key"
        )
        with lob_python.ApiClient(self.config_for_unit) as self.api_client:
            self.mock_api = ChecksApi(self.api_client)

        self.check_editable = CheckEditable(
            message = "fake message",
            _from = "adr_fakeId1",
            to = "adr_fakeId2",
            bank_account = "bank_fakeId",
            amount = 100.0,
        )

        self.mock_list_of_checks = MagicMock(return_value={
            "data": [{ "id": "fake 1" }, { "id": "fake 2" }]
        })

    def test_check_create_error_handle(self):
        """Test case for handling create error"""
        self.mock_api.check_create = Mock(side_effect=UnauthorizedException(status=401, reason="Unauthorized"))

        with self.assertRaises(Exception) as context:
            self.mock_api.check_create(self.check_editable)
        self.assertTrue("Unauthorized" in context.exception.__str__())

    def test_check_create(self):
        """Test case for creating new check"""
        self.mock_api.check_create = MagicMock(return_value={
            "id": "chk_fakeId"
        })
        created_check = self.mock_api.check_create(self.check_editable)
        self.assertIsNotNone(created_check)
        self.assertEqual(created_check["id"], "chk_fakeId")

    def test_check_create_with_idempotency_key(self):
        """Test case for creating new check with idempotency key"""
        self.mock_api.check_create = MagicMock(return_value={
            "id": "chk_fakeId"
        })
        created_check = self.mock_api.check_create(self.check_editable, idempotency_key="fake_idempotencyKey")
        self.assertIsNotNone(created_check)

    def test_check_create_with_custom_headers(self):
        """Test case for creating new check with custom headers"""
        self.mock_api.check_create = MagicMock(return_value={
            "id": "chk_fakeId"
        })
        created_check = self.mock_api.check_create(self.check_editable, _content_type="application/json")
        self.assertIsNotNone(created_check)
        self.assertEqual(created_check["id"], "chk_fakeId")

    def test_check_retrieve(self):
        """Test case for retrieving check"""
        self.mock_api.check_retrieve = MagicMock(return_value={
            "id": "chk_fakeId"
        })
        retrieved_check = self.mock_api.check_retrieve("chk_fakeId")
        self.assertIsNotNone(retrieved_check)
        self.assertEqual(retrieved_check["id"], "chk_fakeId")

    def test_check_retrieve_with_custom_headers(self):
        """Test case for retrieving check with custom headers"""
        self.mock_api.check_retrieve = MagicMock(return_value={
            "id": "chk_fakeId"
        })
        retrieved_check = self.mock_api.check_retrieve("chk_fakeId", _content_type="application/json")
        self.assertIsNotNone(retrieved_check)
        self.assertEqual(retrieved_check["id"], "chk_fakeId")

    def test_check_retrieve_error_handle(self):
        """Test case for handling retrieve error"""
        self.mock_api.check_retrieve = Mock(side_effect=NotFoundException(status=404, reason="Not Found"))

        with self.assertRaises(Exception) as context:
            self.mock_api.check_retrieve("chk_fakeId")
        self.assertTrue("Not Found" in context.exception.__str__())

    def test_checks_list(self):
        """Test case for listing checks"""
        self.mock_api.checks_list = self.mock_list_of_checks
        checks = self.mock_api.checks_list()
        self.assertIsNotNone(checks)
        self.assertEqual(len(checks["data"]), 2)

    def test_checks_list_with_custom_headers(self):
        """Test case for listing checks with custom headers"""
        self.mock_api.checks_list = self.mock_list_of_checks
        checks = self.mock_api.checks_list(_content_type="application/json")
        self.assertIsNotNone(checks)
        self.assertEqual(len(checks["data"]), 2)

    def test_checks_list_error_handle(self):
        """Test case for handling list error"""
        msg = """Cannot prepare a request message for provided
                 arguments. Please check that your arguments match
                 declared content type."""
        self.mock_api.checks_list = Mock(side_effect=ApiException(status=0, reason=msg))

        with self.assertRaises(Exception) as context:
            self.mock_api.checks_list()
        self.assertTrue("Cannot prepare a request message" in context.exception.__str__())

    def test_checks_list_with_limit_param(self):
        """Test case for listing check with limit parameter"""
        self.mock_api.checks_list = self.mock_list_of_checks
        checks = self.mock_api.checks_list(limit=10)
        self.assertIsNotNone(checks)
        self.assertEqual(len(checks["data"]), 2)

    def test_checks_list_with_before_param(self):
        """Test case for listing check with before parameter"""
        self.mock_api.checks_list = self.mock_list_of_checks
        checks = self.mock_api.checks_list(before="before")
        self.assertIsNotNone(checks)
        self.assertEqual(len(checks["data"]), 2)

    def test_checks_list_with_after_param(self):
        """Test case for listing check with after parameter"""
        self.mock_api.checks_list = self.mock_list_of_checks
        checks = self.mock_api.checks_list(after="after")
        self.assertIsNotNone(checks)
        self.assertEqual(len(checks["data"]), 2)

    def test_checks_list_with_include_param(self):
        """Test case for listing check with include parameter"""
        self.mock_api.checks_list = self.mock_list_of_checks
        checks = self.mock_api.checks_list(include=IncludeModel(["total_count"]))
        self.assertIsNotNone(checks)
        self.assertEqual(len(checks["data"]), 2)

    def test_checks_list_with_date_created_param(self):
        """Test case for listing check with date_created parameter"""
        self.mock_api.checks_list = self.mock_list_of_checks
        checks = self.mock_api.checks_list(date_created={ "gt": "2020-01-01", "lt": "2020-01-31T12" })
        self.assertIsNotNone(checks)
        self.assertEqual(len(checks["data"]), 2)

    def test_checks_list_with_metadata_param(self):
        """Test case for listing check with metadata parameter"""
        self.mock_api.checks_list = self.mock_list_of_checks
        checks = self.mock_api.checks_list(metadata=MetadataModel(fakeMetadata = "fakeMetadata"))
        self.assertIsNotNone(checks)
        self.assertEqual(len(checks["data"]), 2)

    def test_checks_list_with_scheduled_param(self):
        """Test case for listing check with scheduled parameter"""
        self.mock_api.checks_list = self.mock_list_of_checks
        checks = self.mock_api.checks_list(scheduled=True)
        self.assertIsNotNone(checks)
        self.assertEqual(len(checks["data"]), 2)

    def test_checks_list_with_send_date_param(self):
        """Test case for listing check with send_date parameter"""
        self.mock_api.checks_list = self.mock_list_of_checks
        checks = self.mock_api.checks_list(send_date={ "gt": "2012-01-01", "lt": "2012-01-31T12:34:56Z" })
        self.assertIsNotNone(checks)
        self.assertEqual(len(checks["data"]), 2)

    def test_checks_list_with_mail_type_param(self):
        """Test case for listing check with mail_type parameter"""
        self.mock_api.checks_list = self.mock_list_of_checks
        checks = self.mock_api.checks_list(mail_type=MailType('usps_first_class'))
        self.assertIsNotNone(checks)
        self.assertEqual(len(checks["data"]), 2)

    def test_checks_list_with_sort_by_param(self):
        """Test case for listing check with sort_by parameter"""
        self.mock_api.checks_list = self.mock_list_of_checks
        checks = self.mock_api.checks_list(sort_by=SortBy3(date_created = 'asc'))

        self.assertIsNotNone(checks)
        self.assertEqual(len(checks["data"]), 2)

    def test_check_cancel(self):
        """Test case for deleting check"""
        self.mock_api.check_cancel = MagicMock(return_value={
            "id": "chk_fakeId", "deleted": True
        })
        deleted_check = self.mock_api.check_cancel("chk_fakeId")
        self.assertIsNotNone(deleted_check)
        self.assertTrue(deleted_check["deleted"])

    def test_check_cancel_with_custom_headers(self):
        """Test case for deleting check"""
        self.mock_api.check_cancel = MagicMock(return_value={
            "id": "chk_fakeId", "deleted": True
        })
        deleted_check = self.mock_api.check_cancel("chk_fakeId", _content_type="application/json")
        self.assertIsNotNone(deleted_check)
        self.assertTrue(deleted_check["deleted"])

    def test_check_cancel_error_handle(self):
        """Test case for handling delete error"""
        self.mock_api.check_cancel = Mock(side_effect=NotFoundException(status=404, reason="Not Found"))

        with self.assertRaises(Exception) as context:
            self.mock_api.check_cancel("chk_fakeId")
        self.assertTrue("Not Found" in context.exception.__str__())

if __name__ == '__main__':
    unittest.main()
