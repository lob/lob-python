"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: lob-openapi@lob.com
    Generated by: https://openapi-generator.tech
"""

import string
import unittest
import warnings

import lob_python
from lob_python.api.template_versions_api import TemplateVersionsApi  # noqa: E501
from lob_python.model.template_version_writable import TemplateVersionWritable
from lob_python.model.template_version_updatable import TemplateVersionUpdatable
from lob_python.model.include_model import IncludeModel
from lob_python.model.engine_html import EngineHtml
from lob_python.exceptions import UnauthorizedException, NotFoundException, ApiException
from unittest.mock import Mock, MagicMock

class TestTemplateVersionsApi(unittest.TestCase):
    """TemplateVersionsApi unit test stubs"""

    def setUp(self):
        warnings.simplefilter("ignore", ResourceWarning)
        self.config_for_unit = lob_python.Configuration(
            username = "Totally Fake Key"
        )
        with lob_python.ApiClient(self.config_for_unit) as self.api_client:
            self.mock_api = TemplateVersionsApi(self.api_client)

        self.template_version_writable = TemplateVersionWritable(
            description = "Newer Template",
            html = "<html>Updated HTML for Template 1/html>",
        )

        self.template_version_updatable = TemplateVersionUpdatable(
            description = "template version updated",
            engine = EngineHtml("handlebars"),
        )

        self.mock_list_of_template_versions =  MagicMock(return_value={
            "data": [{ "id": "fake 1" }, { "id": "fake 2" }]
        })

    def test_create_template_version(self):
        """Test case for creating new template version"""
        self.mock_api.create_template_version = MagicMock(return_value={
            "id": "vrsn_fakeId"
        })
        created_template_version = self.mock_api.create_template_version("tmpl_fakeId", self.template_version_writable)
        self.assertIsNotNone(created_template_version)
        self.assertEqual(created_template_version["id"], "vrsn_fakeId")

    def test_create_template_version_with_idempotency_key(self):
        """Test case for creating new template version with idempotency key"""
        self.mock_api.create_template_version = MagicMock(return_value={
            "id": "vrsn_fakeId"
        })
        created_template_version = self.mock_api.create_template_version("tmpl_fakeId", self.template_version_writable, idempotency_key="fake_idempotencyKey")
        self.assertIsNotNone(created_template_version)

    def test_create_template_version_with_custom_headers(self):
        """Test case for creating new template version with custom headers"""
        self.mock_api.create_template_version = MagicMock(return_value={
            "id": "vrsn_fakeId"
        })
        created_template_version = self.mock_api.create_template_version("tmpl_fakeId", self.template_version_writable, _content_type="application/json")
        self.assertIsNotNone(created_template_version)
        self.assertEqual(created_template_version["id"], "vrsn_fakeId")

    def test_template_version_retrieve(self):
        """Test case for retrieving template version"""
        self.mock_api.template_version_retrieve = MagicMock(return_value={
            "id": "vrsn_fakeId"
        })
        retrieved_template_version = self.mock_api.template_version_retrieve("tmpl_fakeId", "vrsn_fakeId")
        self.assertIsNotNone(retrieved_template_version)
        self.assertEqual(retrieved_template_version["id"], "vrsn_fakeId")

    def test_template_version_retrieve_with_custom_headers(self):
        """Test case for retrieving check with custom headers"""
        self.mock_api.template_version_retrieve = MagicMock(return_value={
            "id": "vrsn_fakeId"
        })
        retrieved_template_version = self.mock_api.template_version_retrieve("tmpl_fakeId", "vrsn_fakeId", _content_type="application/json")
        self.assertIsNotNone(retrieved_template_version)
        self.assertEqual(retrieved_template_version["id"], "vrsn_fakeId")

    def test_template_version_retrieve_error_handle(self):
        """Test case for handling retrieve error"""
        self.mock_api.template_version_retrieve = Mock(side_effect=NotFoundException(status=404, reason="Not Found"))

        with self.assertRaises(Exception) as context:
            self.mock_api.template_version_retrieve("tmpl_fakeId", "vrsn_fakeId")
        self.assertTrue("Not Found" in context.exception.__str__())

    def test_template_version_delete(self):
        """Test case for deleting template version"""
        self.mock_api.template_version_delete = MagicMock(return_value={
            "id": "vrsn_fakeId", "deleted": True
        })
        deleted_template_version = self.mock_api.template_version_delete("tmpl_fakeId", "vrsn_fakeId")
        self.assertTrue(deleted_template_version["deleted"])

    def test_template_version_delete_with_custom_headers(self):
        """Test case for deleting template version"""
        self.mock_api.template_version_delete = MagicMock(return_value={
            "id": "vrsn_fakeId", "deleted": True
        })
        deleted_template_version = self.mock_api.template_version_delete("tmpl_fakeId", "vrsn_fakeId", _content_type="application/json")
        self.assertTrue(deleted_template_version["deleted"])

    def test_template_version_delete_error_handle(self):
        """Test case for handling delete error"""
        self.mock_api.template_version_delete = Mock(side_effect=NotFoundException(status=404, reason="Not Found"))

        with self.assertRaises(Exception) as context:
            self.mock_api.template_version_delete("tmpl_fakeId", "vrsn_fakeId")
        self.assertTrue("Not Found" in context.exception.__str__())

    def test_template_version_update(self):
        """Test case for updating template version"""
        self.mock_api.template_version_update = MagicMock(return_value={
            "id": "vrsn_fakeId"
        })
        updated_template_version = self.mock_api.template_version_update("tmpl_fakeId", "vrsn_fakeId", self.template_version_updatable)
        self.assertIsNotNone(updated_template_version)
        self.assertEqual(updated_template_version["id"], "vrsn_fakeId")

    def test_template_version_update_with_custom_headers(self):
        """Test case for updating template version with custom headers"""
        self.mock_api.template_version_update = MagicMock(return_value={
            "id": "vrsn_fakeId"
        })
        updated_template_version = self.mock_api.template_version_update("tmpl_fakeId", "vrsn_fakeId", self.template_version_updatable, _content_type="application/json")
        self.assertIsNotNone(updated_template_version)
        self.assertEqual(updated_template_version["id"], "vrsn_fakeId")

    def test_template_version_update_error_handle(self):
        """Test case for handling update error"""
        self.mock_api.template_version_update = Mock(side_effect=NotFoundException(status=404, reason="Not Found"))

        with self.assertRaises(Exception) as context:
            self.mock_api.template_version_update("tmpl_fakeId", "vrsn_fakeId", self.template_version_updatable)
        self.assertTrue("Not Found" in context.exception.__str__())

    def test_template_versions_list(self):
        """Test case for listing template_versions"""
        self.mock_api.template_versions_list = self.mock_list_of_template_versions
        template_versions = self.mock_api.template_versions_list(tmpl_id="tmpl_fakeId")
        self.assertIsNotNone(template_versions)
        self.assertEqual(len(template_versions["data"]), 2)

    def test_template_versions_list_with_custom_headers(self):
        """Test case for listing template_versions with custom headers"""
        self.mock_api.template_versions_list = self.mock_list_of_template_versions
        template_versions = self.mock_api.template_versions_list(tmpl_id="tmpl_fakeId", _content_type="application/json")
        self.assertIsNotNone(template_versions)
        self.assertEqual(len(template_versions["data"]), 2)

    def test_template_versions_list_error_handle(self):
        """Test case for handling list error"""
        msg = """Cannot prepare a request message for provided
                 arguments. Please check that your arguments match
                 declared content type."""
        self.mock_api.template_versions_list = Mock(side_effect=ApiException(status=0, reason=msg))

        with self.assertRaises(Exception) as context:
            self.mock_api.template_versions_list(tmpl_id="tmpl_fakeId")
        self.assertTrue("Cannot prepare a request message" in context.exception.__str__())

    def test_template_versions_list_with_limit_param(self):
        """Test case for listing template versions with limit parameter"""
        self.mock_api.template_versions_list = self.mock_list_of_template_versions
        template_versions = self.mock_api.template_versions_list(tmpl_id="tmpl_fakeId", limit=10)
        self.assertIsNotNone(template_versions)
        self.assertEqual(len(template_versions["data"]), 2)

    def test_template_versions_list_with_before_param(self):
        """Test case for listing template versions with before parameter"""
        self.mock_api.template_versions_list = self.mock_list_of_template_versions
        template_versions = self.mock_api.template_versions_list(tmpl_id="tmpl_fakeId", before="before")
        self.assertIsNotNone(template_versions)
        self.assertEqual(len(template_versions["data"]), 2)

    def test_template_versions_list_with_after_param(self):
        """Test case for listing template versions with after parameter"""
        self.mock_api.template_versions_list = self.mock_list_of_template_versions
        template_versions = self.mock_api.template_versions_list(tmpl_id="tmpl_fakeId", after="after")
        self.assertIsNotNone(template_versions)
        self.assertEqual(len(template_versions["data"]), 2)

    def test_template_versions_list_with_include_param(self):
        """Test case for listing template versions with include parameter"""
        self.mock_api.template_versions_list = self.mock_list_of_template_versions
        template_versions = self.mock_api.template_versions_list(tmpl_id="tmpl_fakeId", include=IncludeModel(["total_count"]))
        self.assertIsNotNone(template_versions)
        self.assertEqual(len(template_versions["data"]), 2)

    def test_template_versions_list_with_dateCreated_param(self):
        """Test case for listing template versions with date_created parameter"""
        self.mock_api.template_versions_list = self.mock_list_of_template_versions
        template_versions = self.mock_api.template_versions_list(tmpl_id="tmpl_fakeId", date_created={ "gt": "2020-01-01", "lt": "2020-01-31T12" })
        self.assertIsNotNone(template_versions)
        self.assertEqual(len(template_versions["data"]), 2)

if __name__ == '__main__':
    unittest.main()
