# """
#     Lob

#     The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

#     The version of the OpenAPI document: 1.3.0
#     Contact: lob-openapi@lob.com
#     Generated by: https://openapi-generator.tech
# """

# import unittest
# import warnings

# import lob_python

# from lob_python.api.uploads_api import UploadsApi  # noqa: E501
# from lob_python.model.upload_writable import UploadWritable
# from lob_python.model.upload_updatable import UploadUpdatable
# from unittest.mock import Mock, MagicMock
# from lob_python.model.sort_by3 import SortBy3
# from lob_python.exceptions import UnauthorizedException, NotFoundException, ApiException


# class TestUploadsApi(unittest.TestCase):
#     """UploadsApi unit test stubs"""

#     def setUp(self):
#         warnings.simplefilter("ignore", ResourceWarning)
#         self.config_for_unit = lob_python.Configuration(
#             username = "Totally Fake Key"
#         )
#         with lob_python.ApiClient(self.config_for_unit) as self.api_client:
#             self.mock_api = UploadsApi(self.api_client)

#         self.upload_writable = UploadWritable(
#             campaign_id = "campaign_fake"
#         )

#         self.mock_list_of_uploads = MagicMock(return_value={
#             "data": [{ "id": "fake 1" }, { "id": "fake 2" }]
#         })

#     def test_upload_create_error_handle(self):
#         """Test case for handling create error"""
#         self.mock_api.upload_create = Mock(side_effect=UnauthorizedException(status=401, reason="Unauthorized"))

#         with self.assertRaises(Exception) as context:
#             self.mock_api.upload_create(self.upload_writable)
#         self.assertTrue("Unauthorized" in context.exception.__str__())

#     def test_upload_create(self):
#         """Test case for creating new upload"""
#         self.mock_api.upload_create = MagicMock(return_value={
#             "id": "upload_fakeId"
#         })
#         created_upload = self.mock_api.upload_create(self.upload_writable)
#         self.assertIsNotNone(created_upload)
#         self.assertIsNotNone(created_upload["id"])

#     def test_upload_create_with_custom_headers(self):
#         """Test case for creating new upload with custom headers"""
#         self.mock_api.upload_create = MagicMock(return_value={
#             "id": "upload_fakeId"
#         })
#         created_upload = self.mock_api.upload_create(self.upload_writable, _content_type="application/json")
#         self.assertIsNotNone(created_upload)
#         self.assertIsNotNone(created_upload["id"])

#     def test_upload_retrieve(self):
#         """Test case for retrieving upload"""
#         self.mock_api.upload_retrieve = MagicMock(return_value={
#             "id": "upload_differentFakeId"
#         })
#         retrieved_upload = self.mock_api.upload_retrieve("upl_fakeId")
#         self.assertEqual(retrieved_upload["id"], "upload_differentFakeId")

#     def test_upload_retrieve_with_custom_headers(self):
#         """Test case for retrieving upload with custom headers"""
#         self.mock_api.upload_retrieve = MagicMock(return_value={
#             "id": "upload_differentFakeId"
#         })
#         retrieved_upload = self.mock_api.upload_retrieve("upl_fakeId", _content_type="application/json")
#         self.assertEqual(retrieved_upload["id"], "upload_differentFakeId")

#     def test_upload_retrieve_error_handle(self):
#         """Test case for handling retrieve error"""
#         self.mock_api.upload_retrieve = Mock(side_effect=NotFoundException(status=404, reason="Not Found"))

#         with self.assertRaises(Exception) as context:
#             self.mock_api.upload_retrieve("upl_fakeId")
#         self.assertTrue("Not Found" in context.exception.__str__())

#     def test_uploads_list(self):
#         """Test case for listing uploads"""
#         self.mock_api.uploads_list = self.mock_list_of_uploads
#         uploads = self.mock_api.uploads_list()
#         self.assertIsNotNone(uploads)
#         self.assertIsNotNone(uploads["data"], 2)

#     def test_uploads_list_with_custom_headers(self):
#         """Test case for listing uploads with custom headers"""
#         self.mock_api.uploads_list = self.mock_list_of_uploads
#         uploads = self.mock_api.uploads_list(_content_type="application/json")
#         self.assertIsNotNone(uploads)
#         self.assertIsNotNone(uploads["data"], 2)

#     def test_uploads_list_error_handle(self):
#         """Test case for handling list error"""
#         msg = """Cannot prepare a request message for provided
#                  arguments. Please check that your arguments match
#                  declared content type."""
#         self.mock_api.uploads_list = Mock(side_effect=ApiException(status=0, reason=msg))

#         with self.assertRaises(Exception) as context:
#             self.mock_api.uploads_list()
#         self.assertTrue("Cannot prepare a request message" in context.exception.__str__())

#     def test_uploads_list_with_limit_param(self):
#         """Test case for listing upload with limit parameter"""
#         self.mock_api.uploads_list = self.mock_list_of_uploads
#         uploads = self.mock_api.uploads_list(limit=10)
#         self.assertIsNotNone(uploads)
#         self.assertIsNotNone(uploads["data"], 2)

#     def test_uploads_list_with_before_param(self):
#         """Test case for listing upload with before parameter"""
#         self.mock_api.uploads_list = self.mock_list_of_uploads
#         uploads = self.mock_api.uploads_list(before="before")
#         self.assertIsNotNone(uploads)
#         self.assertIsNotNone(uploads["data"], 2)

#     def test_uploads_list_with_after_param(self):
#         """Test case for listing upload with after parameter"""
#         self.mock_api.uploads_list = self.mock_list_of_uploads
#         uploads = self.mock_api.uploads_list(after="after")
#         self.assertIsNotNone(uploads)
#         self.assertIsNotNone(uploads["data"], 2)

#     def test_uploads_list_with_sortby_param(self):
#         """Test case for listing upload with sort_by parameter"""
#         self.mock_api.uploads_list = self.mock_list_of_uploads
#         uploads = self.mock_api.uploads_list(sort_by=SortBy3(date_created = 'asc'))
#         self.assertIsNotNone(uploads)
#         self.assertIsNotNone(uploads["data"], 2)

#     def test_upload_update(self):
#         """Test case for updating upload"""
#         self.mock_api.upload_update = MagicMock(return_value={
#             "id": "upload_fakeId",
#         })

#         updated_upload = self.mock_api.upload_update("upload_fakeId", self.upload_updatable)
#         self.assertIsNotNone(updated_upload)

#     def test_upload_update_with_custom_headers(self):
#         """Test case for updating upload with custom headers"""
#         self.mock_api.upload_update = MagicMock(return_value={
#             "id": "upload_fakeId",
#         })

#         updated_upload = self.mock_api.upload_update("upload_fakeId", self.upload_updatable, _content_type="application/json")
#         self.assertIsNotNone(updated_upload)

#     def test_upload_update_error_handle(self):
#         """Test case for handling update error"""
#         self.mock_api.upload_update = Mock(side_effect=NotFoundException(status=404, reason="Not Found"))
#         with self.assertRaises(Exception) as context:
#             self.mock_api.upload_update("upload_fakeId", self.mock_api.upload_update)
#         self.assertTrue("Not Found" in context.exception.__str__())

#     def test_upload_delete(self):
#         """Test case for deleting upload"""
#         self.mock_api.upload_delete = MagicMock(return_value={
#             "id": "upload_fakeId", "deleted": True
#         })
#         deleted_upload = self.mock_api.upload_delete("upload_fakeId")
#         self.assertTrue(deleted_upload["deleted"])

#     def test_upload_delete_with_custom_headers(self):
#         """Test case for deleting upload"""
#         self.mock_api.upload_delete = MagicMock(return_value={
#             "id": "upload_fakeId", "deleted": True
#         })
#         deleted_upload = self.mock_api.upload_delete("upload_fakeId", _content_type="application/json")
#         self.assertTrue(deleted_upload["deleted"])

#     def test_upload_delete_error_handle(self):
#         """Test case for handling delete error"""
#         self.mock_api.upload_delete = Mock(side_effect=NotFoundException(status=404, reason="Not Found"))

#         with self.assertRaises(Exception) as context:
#             self.mock_api.upload_delete("upload_fakeId")
#         self.assertTrue("Not Found" in context.exception.__str__())

# if __name__ == '__main__':
#     unittest.main()
