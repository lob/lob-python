"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: lob-openapi@lob.com
    Generated by: https://openapi-generator.tech
"""

import string
import unittest
import warnings

import lob_python
from lob_python.api.intl_autocompletions_api import IntlAutocompletionsApi  # noqa: E501
from lob_python.model.intl_autocompletions_writable import IntlAutocompletionsWritable
from lob_python.model.intl_suggestions import IntlSuggestions
from lob_python.model.country_extended import CountryExtended
from lob_python.model.country_extended_expanded import CountryExtendedExpanded
from lob_python.exceptions import UnauthorizedException
from unittest.mock import Mock, MagicMock

class TestIntlAutocompletionsApi(unittest.TestCase):
    """IntlAutocompletionsApi unit test stubs"""

    def setUp(self):
        warnings.simplefilter("ignore", ResourceWarning)
        self.config_for_unit = lob_python.Configuration(
            username = "Totally Fake Key"
        )
        with lob_python.ApiClient(self.config_for_unit) as self.api_client:
            self.mock_api = IntlAutocompletionsApi(self.api_client)

        self.intl_autocompletion_writable = IntlAutocompletionsWritable(
            address_prefix = "340 Wat",
            city = "Summerside",
            state = "Prince Edward Island",
            zip_code = "C1N 1C4",
            country = CountryExtended("CA"),
        )

        self.suggestion = IntlSuggestions(
            primary_number_range = "",
            primary_line = "340 WATERSTONE PL SE",
            city = "AIRDRIE",
            state = "AB",
            country = CountryExtendedExpanded("CANADA"),
            zip_code = "T4B 2G7",
        )

    def test_intl_autocompletion_autocomplete_error_handle(self):
        """Test case for handling autocomplete error"""
        self.mock_api.intl_autocompletion = Mock(side_effect=UnauthorizedException(status=401, reason="Unauthorized"))

        with self.assertRaises(Exception) as context:
            self.mock_api.intl_autocompletion(self.intl_autocompletion_writable)
        self.assertTrue("Unauthorized" in context.exception.__str__())

    def test_intl_autocompletion_autocomplete(self):
        """Test case for autocompletion of intl address"""
        self.mock_api.intl_autocompletion = MagicMock(return_value={
            "suggestions": [self.suggestion]
        })
        suggestions = self.mock_api.intl_autocompletion(self.intl_autocompletion_writable)
        self.assertIsNotNone(suggestions)
        self.assertEqual(len(suggestions), 1)

    def test_intl_autocompletion_autocomplete_with_custom_headers(self):
        """Test case for autocompletion of intl address with custom headers"""
        self.mock_api.intl_autocompletion = MagicMock(return_value={
            "suggestions": [self.suggestion]
        })
        suggestions = self.mock_api.intl_autocompletion(self.intl_autocompletion_writable, _content_type="application/json")
        self.assertIsNotNone(suggestions)
        self.assertEqual(len(suggestions), 1)

    def test_intl_autocompletion_autocomplete_with_xlang(self):
        """Test case for autocompletion of intl address with xLang"""
        self.mock_api.intl_autocompletion = MagicMock(return_value={
            "suggestions": [self.suggestion]
        })
        suggestions = self.mock_api.intl_autocompletion(self.intl_autocompletion_writable, x_lang_output="native")
        self.assertIsNotNone(suggestions)
        self.assertEqual(len(suggestions), 1)

if __name__ == '__main__':
    unittest.main()
