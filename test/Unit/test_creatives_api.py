# """
#     Lob

#     The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

#     The version of the OpenAPI document: 1.3.0
#     Contact: lob-openapi@lob.com
#     Generated by: https://openapi-generator.tech
# """

# import unittest
# import warnings

# import lob_python
# from lob_python.api.creatives_api import CreativesApi  # noqa: E501
# from lob_python.model.creative_writable import CreativeWritable  # noqa: E501
# from lob_python.model.creative_patch import CreativePatch
# from lob_python.model.postcard_details_writable import PostcardDetailsWritable
# from lob_python.model.address_editable import AddressEditable  # noqa: E501
# from unittest.mock import Mock, MagicMock
# from lob_python.exceptions import UnauthorizedException, NotFoundException


# class TestCreativesApi(unittest.TestCase):
#     """CreativesApi unit test stubs"""

#     def setUp(self):
#         warnings.simplefilter("ignore", ResourceWarning)
#         self.config_for_unit = lob_python.Configuration(
#             username = "Totally Fake Key"
#         )
#         with lob_python.ApiClient(self.config_for_unit) as self.api_client:
#             self.mock_api = CreativesApi(self.api_client)

#         _from = AddressEditable(
#             name = "FESTER",
#             address_line1 = "001 CEMETERY LN",
#             address_line2 = "SUITE 666",
#             address_city = "WESTFIELD",
#             address_state = "NJ",
#             address_zip = "07000"
#         )

#         self.creative_writable = CreativeWritable(
#             _from = _from,
#             campaign_id = "campaign_fake",
#             resource_type = "postcard",
#             details = PostcardDetailsWritable(),
#             front = "tmpl_fake",
#             back = "tmpl_fake"
#         )

#         self.creative_updatable = CreativePatch(
#             description = "Updated creative"
#         )

#     def test_creative_create_error_handle(self):
#         """Test case for handling create error"""
#         self.mock_api.creative_create = Mock(side_effect=UnauthorizedException(status=401, reason="Unauthorized"))

#         with self.assertRaises(Exception) as context:
#             self.mock_api.creative_create(self.creative_writable)
#         self.assertTrue("Unauthorized" in context.exception.__str__())

#     def test_creative_create(self):
#         """Test case for creating new campaign"""
#         self.mock_api.creative_create = MagicMock(return_value={
#             "id": "campaign_fakeId"
#         })
#         created_creative = self.mock_api.creative_create(self.creative_writable)
#         self.assertIsNotNone(created_creative)
#         self.assertIsNotNone(created_creative["id"])

#     def test_creative_create_with_custom_headers(self):
#         """Test case for creating new campaign with custom headers"""
#         self.mock_api.creative_create = MagicMock(return_value={
#             "id": "campaign_fakeId"
#         })
#         created_creative = self.mock_api.creative_create(self.creative_writable, _content_type="application/json")
#         self.assertIsNotNone(created_creative)
#         self.assertIsNotNone(created_creative["id"])

#     def test_creative_retrieve(self):
#         """Test case for retrieving campaign"""
#         self.mock_api.creative_retrieve = MagicMock(return_value={
#             "id": "campaign_differentFakeId"
#         })
#         retrieved_creative = self.mock_api.creative_retrieve("campaign_fakeId")
#         self.assertEqual(retrieved_creative["id"], "campaign_differentFakeId")

#     def test_creative_retrieve_with_custom_headers(self):
#         """Test case for retrieving campaign with custom headers"""
#         self.mock_api.creative_retrieve = MagicMock(return_value={
#             "id": "campaign_differentFakeId"
#         })
#         retrieved_creative = self.mock_api.creative_retrieve("campaign_fakeId", _content_type="application/json")
#         self.assertEqual(retrieved_creative["id"], "campaign_differentFakeId")

#     def test_creative_retrieve_error_handle(self):
#         """Test case for handling retrieve error"""
#         self.mock_api.creative_retrieve = Mock(side_effect=NotFoundException(status=404, reason="Not Found"))

#         with self.assertRaises(Exception) as context:
#             self.mock_api.creative_retrieve("campaign_fakeId")
#         self.assertTrue("Not Found" in context.exception.__str__())

#     def test_creative_update(self):
#         """Test case for updating campaign"""
#         self.mock_api.creative_update = MagicMock(return_value={
#             "id": "campaign_fakeId",
#             "description": self.creative_updatable["description"],
#         })

#         updated_creative = self.mock_api.creative_update("campaign_fakeId", self.creative_updatable)
#         self.assertIsNotNone(updated_creative)
#         self.assertEqual(updated_creative["description"], self.creative_updatable["description"])

#     def test_creative_update_with_custom_headers(self):
#         """Test case for updating campaign with custom headers"""
#         self.mock_api.creative_update = MagicMock(return_value={
#             "id": "campaign_fakeId",
#             "description": self.creative_updatable["description"]
#         })

#         updated_creative = self.mock_api.creative_update("campaign_fakeId", self.creative_updatable, _content_type="application/json")
#         self.assertIsNotNone(updated_creative)
#         self.assertEqual(updated_creative["description"], self.creative_updatable["description"])

#     def test_creative_update_error_handle(self):
#         """Test case for handling update error"""
#         self.mock_api.creative_update = Mock(side_effect=NotFoundException(status=404, reason="Not Found"))
#         with self.assertRaises(Exception) as context:
#             self.mock_api.creative_update("campaign_fakeId", self.mock_api.creative_update)
#         self.assertTrue("Not Found" in context.exception.__str__())

# if __name__ == '__main__':
#     unittest.main()
