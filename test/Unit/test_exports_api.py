# """
#     Lob

#     The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

#     The version of the OpenAPI document: 1.3.0
#     Contact: lob-openapi@lob.com
#     Generated by: https://openapi-generator.tech
# """

# import unittest
# import warnings

# import lob_python
# from lob_python.api.uploads_api import UploadsApi  # noqa: E501
# from lob_python.model.export_model import ExportModel
# from lob_python.model.upload_writable import UploadWritable
# from unittest.mock import Mock, MagicMock
# from lob_python.exceptions import UnauthorizedException, NotFoundException


# class TestExportsApi(unittest.TestCase):
#     """UploadsApi unit test stubs"""

#     def setUp(self):
#         warnings.simplefilter("ignore", ResourceWarning)
#         self.config_for_unit = lob_python.Configuration(
#             username = "Totally Fake Key"
#         )
#         with lob_python.ApiClient(self.config_for_unit) as self.api_client:
#             self.mock_api = UploadsApi(self.api_client)

#         upload_writable  = UploadWritable(
#             campaign_id = "campaign_fake"
#         )

#         self.export_writable  = ExportModel(
#             type = "all"
#         )

#     def test_export_create_error_handle(self):
#         """Test case for handling create error"""
#         self.mock_api.export_create = Mock(side_effect=UnauthorizedException(status=401, reason="Unauthorized"))

#         with self.assertRaises(Exception) as context:
#             self.mock_api.export_create("upl_fake", self.export_writable)
#         self.assertTrue("Unauthorized" in context.exception.__str__())

#     def test_export_create(self):
#         """Test case for creating new campaign"""
#         self.mock_api.export_create = MagicMock(return_value={
#             "id": "ex_fakeId"
#         })
#         created_creative = self.mock_api.export_create("upl_fake", self.export_writable)
#         self.assertIsNotNone(created_creative)
#         self.assertIsNotNone(created_creative["id"])

#     def test_export_create_with_custom_headers(self):
#         """Test case for creating new campaign with custom headers"""
#         self.mock_api.export_create = MagicMock(return_value={
#             "id": "ex_fakeId"
#         })
#         created_creative = self.mock_api.export_create("upl_fake", self.export_writable, _content_type="application/json")
#         self.assertIsNotNone(created_creative)
#         self.assertIsNotNone(created_creative["id"])

#     def test_export_retrieve(self):
#         """Test case for retrieving campaign"""
#         self.mock_api.export_retrieve = MagicMock(return_value={
#             "id": "ex_differentFakeId"
#         })
#         retrieved_creative = self.mock_api.export_retrieve("ex_fakeId")
#         self.assertEqual(retrieved_creative["id"], "ex_differentFakeId")

#     def test_export_retrieve_with_custom_headers(self):
#         """Test case for retrieving campaign with custom headers"""
#         self.mock_api.export_retrieve = MagicMock(return_value={
#             "id": "ex_differentFakeId"
#         })
#         retrieved_creative = self.mock_api.export_retrieve("ex_fakeId", _content_type="application/json")
#         self.assertEqual(retrieved_creative["id"], "ex_differentFakeId")

#     def test_export_retrieve_error_handle(self):
#         """Test case for handling retrieve error"""
#         self.mock_api.export_retrieve = Mock(side_effect=NotFoundException(status=404, reason="Not Found"))

#         with self.assertRaises(Exception) as context:
#             self.mock_api.export_retrieve("ex_fakeId")
#         self.assertTrue("Not Found" in context.exception.__str__())


# if __name__ == '__main__':
#     unittest.main()
