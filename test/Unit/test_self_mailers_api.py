"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: lob-openapi@lob.com
    Generated by: https://openapi-generator.tech
"""

import string
import unittest
import warnings

import lob_python
from lob_python.api.self_mailers_api import SelfMailersApi  # noqa: E501
from lob_python.model.self_mailer_editable import SelfMailerEditable
from lob_python.model.metadata_model import MetadataModel
from lob_python.model.include_model import IncludeModel
from lob_python.model.self_mailer_size import SelfMailerSize
from lob_python.model.mail_type import MailType
from lob_python.model.sort_by5 import SortBy5
from lob_python.exceptions import UnauthorizedException, NotFoundException, ApiException
from unittest.mock import Mock, MagicMock

class TestSelfMailersApi(unittest.TestCase):
    """SelfMailersApi unit test stubs"""

    def setUp(self):
        warnings.simplefilter("ignore", ResourceWarning)
        self.config_for_unit = lob_python.Configuration(
            username = "Totally Fake Key"
        )
        with lob_python.ApiClient(self.config_for_unit) as self.api_client:
            self.mock_api = SelfMailersApi(self.api_client)

        self.sfm_editable = SelfMailerEditable(
          to = "adr_fakeId1",
          _from = "adr_fakeId2",
          inside = "https://s3.us-west-2.amazonaws.com/public.lob.com/assets/templates/self_mailers/6x18_sfm_inside.pdf",
          outside = "https://s3.us-west-2.amazonaws.com/public.lob.com/assets/templates/self_mailers/6x18_sfm_inside.pdf",
        )

        self.mock_list_of_self_mailers =  MagicMock(return_value={
            "data": [{ "id": "fake 1" }, { "id": "fake 2" }]
        })

    def test_self_mailer_create(self):
        """Test case for creating new self mailer"""
        self.mock_api.self_mailer_create = MagicMock(return_value={
            "id": "sfm_fakeId"
        })
        created_self_mailer = self.mock_api.self_mailer_create(self.sfm_editable)
        self.assertIsNotNone(created_self_mailer)
        self.assertEqual(created_self_mailer["id"], "sfm_fakeId")

    def test_self_mailer_create_with_custom_headers(self):
        """Test case for creating new self mailer with custom headers"""
        self.mock_api.self_mailer_create = MagicMock(return_value={
            "id": "sfm_fakeId"
        })
        created_self_mailer = self.mock_api.self_mailer_create(self.sfm_editable, _content_type="application/json")
        self.assertIsNotNone(created_self_mailer)
        self.assertEqual(created_self_mailer["id"], "sfm_fakeId")

    def test_self_mailer_create_with_idempotency_key(self):
        """Test case for creating new self mailer with idempotency key"""
        self.mock_api.self_mailer_create = MagicMock(return_value={
            "id": "sfm_fakeId"
        })
        created_self_mailer = self.mock_api.self_mailer_create(self.sfm_editable, idempotency_key="fake idempotency")
        self.assertIsNotNone(created_self_mailer)
        self.assertEqual(created_self_mailer["id"], "sfm_fakeId")

    def test_self_mailer_create_error_handle(self):
        """Test case for handling create error"""
        self.mock_api.self_mailer_create = Mock(side_effect=UnauthorizedException(status=401, reason="Unauthorized"))

        with self.assertRaises(Exception) as context:
            self.mock_api.self_mailer_create(self.sfm_editable)
        self.assertTrue("Unauthorized" in context.exception.__str__())

    def test_self_mailer_retrieve(self):
        """Test case for retrieving self mailer"""
        self.mock_api.self_mailer_retrieve = MagicMock(return_value={
            "id": "sfm_fakeId"
        })
        retrieved_self_mailer = self.mock_api.self_mailer_retrieve("sfm_fakeId")
        self.assertEqual(retrieved_self_mailer["id"], "sfm_fakeId")

    def test_self_mailer_retrieve_with_custom_headers(self):
        """Test case for retrieving self mailer with custom headers"""
        self.mock_api.self_mailer_retrieve = MagicMock(return_value={
            "id": "sfm_fakeId"
        })
        retrieved_self_mailer = self.mock_api.self_mailer_retrieve("sfm_fakeId", _content_type="application/json")
        self.assertEqual(retrieved_self_mailer["id"], "sfm_fakeId")

    def test_self_mailer_retrieve_error_handle(self):
        """Test case for handling retrieve error"""
        self.mock_api.self_mailer_retrieve = Mock(side_effect=NotFoundException(status=404, reason="Not Found"))

        with self.assertRaises(Exception) as context:
            self.mock_api.self_mailer_retrieve("sfm_fakeId")
        self.assertTrue("Not Found" in context.exception.__str__())

    def test_self_mailers_list(self):
        """Test case for listing self_mailers"""
        self.mock_api.self_mailers_list = self.mock_list_of_self_mailers
        self_mailers = self.mock_api.self_mailers_list()
        self.assertIsNotNone(self_mailers)
        self.assertEqual(len(self_mailers["data"]), 2)

    def test_self_mailers_list_with_custom_headers(self):
        """Test case for listing self_mailers with custom headers"""
        self.mock_api.self_mailers_list = self.mock_list_of_self_mailers
        self_mailers = self.mock_api.self_mailers_list(_content_type="application/json")
        self.assertIsNotNone(self_mailers)
        self.assertEqual(len(self_mailers["data"]), 2)

    def test_self_mailers_list_error_handle(self):
        """Test case for handling list error"""
        msg = """Cannot prepare a request message for provided
                 arguments. Please check that your arguments match
                 declared content type."""
        self.mock_api.self_mailers_list = Mock(side_effect=ApiException(status=0, reason=msg))

        with self.assertRaises(Exception) as context:
            self.mock_api.self_mailers_list()
        self.assertTrue("Cannot prepare a request message" in context.exception.__str__())

    def test_self_mailers_list_with_limit_param(self):
        """Test case for listing self mailer with limit parameter"""
        self.mock_api.self_mailers_list = self.mock_list_of_self_mailers
        self_mailers = self.mock_api.self_mailers_list(limit=10)
        self.assertIsNotNone(self_mailers)
        self.assertEqual(len(self_mailers["data"]), 2)

    def test_self_mailers_list_with_before_param(self):
        """Test case for listing self mailer with before parameter"""
        self.mock_api.self_mailers_list = self.mock_list_of_self_mailers
        self_mailers = self.mock_api.self_mailers_list(before="before")
        self.assertIsNotNone(self_mailers)
        self.assertEqual(len(self_mailers["data"]), 2)

    def test_self_mailers_list_with_after_param(self):
        """Test case for listing self mailer with after parameter"""
        self.mock_api.self_mailers_list = self.mock_list_of_self_mailers
        self_mailers = self.mock_api.self_mailers_list(after="after")
        self.assertIsNotNone(self_mailers)
        self.assertEqual(len(self_mailers["data"]), 2)

    def test_self_mailers_list_with_include_param(self):
        """Test case for listing self mailer with include parameter"""
        self.mock_api.self_mailers_list = self.mock_list_of_self_mailers
        self_mailers = self.mock_api.self_mailers_list(include=IncludeModel(["total_count"]))
        self.assertIsNotNone(self_mailers)
        self.assertEqual(len(self_mailers["data"]), 2)

    def test_self_mailers_list_with_dateCreated_param(self):
        """Test case for listing self mailer with date_created parameter"""
        self.mock_api.self_mailers_list = self.mock_list_of_self_mailers
        self_mailers = self.mock_api.self_mailers_list(date_created={ "gt": "2020-01-01", "lt": "2020-01-31T12" })
        self.assertIsNotNone(self_mailers)
        self.assertEqual(len(self_mailers["data"]), 2)

    def test_self_mailers_list_with_metadata_param(self):
        """Test case for listing self mailer with metadata parameter"""
        self.mock_api.self_mailers_list = self.mock_list_of_self_mailers
        self_mailers = self.mock_api.self_mailers_list(metadata=MetadataModel(fakeMetadata = "fakeMetadata"))
        self.assertIsNotNone(self_mailers)
        self.assertEqual(len(self_mailers["data"]), 2)

    def test_self_mailers_list_with_size_param(self):
        """Test case for listing self mailer with size parameter"""
        self.mock_api.self_mailers_list = self.mock_list_of_self_mailers
        self_mailers = self.mock_api.self_mailers_list(size=SelfMailerSize("6x18_bifold"))
        self.assertIsNotNone(self_mailers)
        self.assertEqual(len(self_mailers["data"]), 2)

    def test_self_mailers_list_with_scheduled_param(self):
        """Test case for listing self mailer with scheduled parameter"""
        self.mock_api.self_mailers_list = self.mock_list_of_self_mailers
        self_mailers = self.mock_api.self_mailers_list(scheduled=True)
        self.assertIsNotNone(self_mailers)
        self.assertEqual(len(self_mailers["data"]), 2)

    def test_self_mailers_list_with_send_date_param(self):
        """Test case for listing self mailer with send_date parameter"""
        self.mock_api.self_mailers_list = self.mock_list_of_self_mailers
        self_mailers = self.mock_api.self_mailers_list(send_date={ "gt": "2012-01-01", "lt": "2012-01-31T12:34:56Z" })
        self.assertIsNotNone(self_mailers)
        self.assertEqual(len(self_mailers["data"]), 2)

    def test_self_mailers_list_with_mail_type_param(self):
        """Test case for listing self mailer with mail_type parameter"""
        self.mock_api.self_mailers_list = self.mock_list_of_self_mailers
        self_mailers = self.mock_api.self_mailers_list(mail_type=MailType('usps_first_class'))
        self.assertIsNotNone(self_mailers)
        self.assertEqual(len(self_mailers["data"]), 2)

    def test_self_mailers_list_with_sort_by_param(self):
        """Test case for listing self mailer with sort_by parameter"""
        self.mock_api.self_mailers_list = self.mock_list_of_self_mailers
        self_mailers = self.mock_api.self_mailers_list(sort_by=SortBy5(date_created = 'asc'))
        self.assertIsNotNone(self_mailers)
        self.assertEqual(len(self_mailers["data"]), 2)

    def test_self_mailers_list_with_multiple_params(self):
        """Test case for listing self mailer with multiple parameters"""
        self.mock_api.self_mailers_list = self.mock_list_of_self_mailers
        self_mailers = self.mock_api.self_mailers_list(limit=10, after="after")
        self.assertIsNotNone(self_mailers)
        self.assertEqual(len(self_mailers["data"]), 2)

    def test_self_mailer_delete(self):
        """Test case for deleting self mailer"""
        self.mock_api.self_mailer_delete = MagicMock(return_value={
            "id": "sfm_fakeId", "deleted": True
        })
        deleted_self_mailer = self.mock_api.self_mailer_delete("sfm_fakeId")
        self.assertTrue(deleted_self_mailer["deleted"])

    def test_self_mailer_delete_with_custom_headers(self):
        """Test case for deleting self mailer"""
        self.mock_api.self_mailer_delete = MagicMock(return_value={
            "id": "sfm_fakeId", "deleted": True
        })
        deleted_self_mailer = self.mock_api.self_mailer_delete("sfm_fakeId", _content_type="application/json")
        self.assertTrue(deleted_self_mailer["deleted"])

    def test_self_mailer_delete_error_handle(self):
        """Test case for handling delete error"""
        self.mock_api.self_mailer_delete = Mock(side_effect=NotFoundException(status=404, reason="Not Found"))

        with self.assertRaises(Exception) as context:
            self.mock_api.self_mailer_delete("sfm_fakeId")
        self.assertTrue("Not Found" in context.exception.__str__())

if __name__ == '__main__':
    unittest.main()
