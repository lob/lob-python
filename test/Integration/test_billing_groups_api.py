"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: lob-openapi@lob.com
    Generated by: https://openapi-generator.tech
"""

import unittest
from unittest_data_provider import data_provider
import warnings
import datetime as dt

import lob_python
import os
from dotenv import load_dotenv
from dateutil.parser import *
from lob_python.api.billing_groups_api import BillingGroupsApi  # noqa: E501
from lob_python.model.sort_by_date_modified import SortByDateModified
from lob_python.model.billing_group_editable import BillingGroupEditable  # noqa: E501

last_month = dt.datetime.combine(
    dt.datetime.now() - dt.timedelta(weeks=4),
    dt.datetime.min.time()
)

class TestBillingGroupsApi(unittest.TestCase):
    """BillingGroupsApi unit test stubs"""
    # limit, offset, include, date_created, date_modified, sort_by_date_modified
    query_params = lambda: (
        (2, None, None, None, None, None),
        (None, 1, None, None, None, None),
        (None, None, ["total_count"], None, None, None),
        (None, None, None, {"gt": last_month}, None, None),
        (None, None, None, None, {"gt": last_month.strftime("%Y-%m-%dT%H:%M:%S%z")}, None),
        (None, None, None, None, None, SortByDateModified(date_modified="asc"))
    )

    @classmethod
    def setUpClass(self):
        load_dotenv()
        warnings.simplefilter("ignore", ResourceWarning)
        self.configuration = lob_python.Configuration(
            username = os.getenv('LOB_API_TEST_KEY')
        )
        with lob_python.ApiClient(self.configuration) as self.api_client:
            self.api = BillingGroupsApi(self.api_client)  # noqa: E501

        self.bg_editable = BillingGroupEditable(
            name = "Test Billing Group 1"
        )

        self.bg_editable2 = BillingGroupEditable(
            name = "Test Billing Group 2"
        )

    @classmethod
    def tearDownClass(self):
        del self.bg_editable
        del self.bg_editable2
        del self.api
        del self.configuration

    def test_401(self):
        """Test case for create with status code 401"""
        configuration = lob_python.Configuration(
            username = "Totally fake key"
        )
        with lob_python.ApiClient(configuration) as api_client:
            invalid_api = BillingGroupsApi(api_client)  # noqa: E501

        with self.assertRaises(Exception) as context:
            invalid_api.create(self.bg_editable)
        self.assertTrue("Your API key is not valid" in context.exception.__str__())

    def test_create200(self):
        """Test case for create

        create  # noqa: E501
        """
        created_bg = self.api.create(self.bg_editable)
        self.assertIsNotNone(created_bg.id)

    def test_get200(self):
        """Test case for get

        get  # noqa: E501
        """
        created_bg = self.api.create(self.bg_editable)
        retrieved_bg = self.api.get(created_bg.id)
        self.assertIsNotNone(retrieved_bg.id)
        self.assertEqual(retrieved_bg.id, created_bg.id)

    def test_get404(self):
        """Test case for get

        get  # noqa: E501
        """
        with self.assertRaises(Exception) as context:
            self.api.get("bg_fake")
        self.assertTrue("billing_group not found" in context.exception.__str__())

    @data_provider(query_params)
    def test_list200(self, limit, offset, include, date_created, date_modified, sort_by_date_modified):
        """Test case for list with other params"""
        args = {}
        if limit:
            args["limit"] = limit

        if offset:
            args["offset"] = offset

        if include:
            args["include"] = include

        if date_created:
            args["date_created"] = date_created

        if date_modified:
            args["date_modified"] = date_modified

        if sort_by_date_modified:
            args["sort_by"] = sort_by_date_modified
        response = self.api.list(**args)

        self.assertGreaterEqual(len(response["data"]), 0)
        if include:
            self.assertIsNotNone(response["total_count"])

    def test_list422(self):
        """Test case for list

        list  # noqa: E501
        """
        with self.assertRaises(Exception) as context:
            self.api.list(limit=101)
        self.assertTrue("Invalid value for `limit`" in context.exception.__str__())

    def test_update200(self):
        """Test case for update

        update  # noqa: E501
        """
        bg_updatable = BillingGroupEditable(
            name = "Updated Test Billing Group"
        )
        created_bg = self.api.create(self.bg_editable)
        updated_bg = self.api.update(created_bg.id, bg_updatable)
        self.assertEqual(updated_bg.name, "Updated Test Billing Group")
        self.assertEqual(updated_bg.id, created_bg.id)

    def test_update404(self):
        """Test case for update

        update  # noqa: E501
        """
        bg_updatable = BillingGroupEditable(
            name = "Updated Test Billing Group"
        )
        with self.assertRaises(Exception) as context:
            self.api.update("bg_fakeId", bg_updatable)
        self.assertTrue("billing_group not found" in context.exception.__str__())

if __name__ == '__main__':
    unittest.main()
