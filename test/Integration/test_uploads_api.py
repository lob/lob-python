"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: lob-openapi@lob.com
    Generated by: https://openapi-generator.tech
"""

import unittest
import warnings
import uuid

import lob_python
import os
from dotenv import load_dotenv
from dateutil.parser import *
from lob_python.api.campaigns_api import CampaignsApi  # noqa: E501
from lob_python.model.campaign_writable import CampaignWritable  # noqa: E501
from lob_python.model.cmp_schedule_type import CmpScheduleType

from lob_python.api.uploads_api import UploadsApi  # noqa: E501
from lob_python.model.upload_writable import UploadWritable
from lob_python.model.upload_updatable import UploadUpdatable


class TestCampaignsApi(unittest.TestCase):
    """CampaignsApi unit test stubs"""

    @classmethod
    def setUpClass(self):
        load_dotenv()
        warnings.simplefilter("ignore", ResourceWarning)
        self.upload_ids = []
        self.configuration = lob_python.Configuration(
            username = os.getenv('LOB_API_TEST_KEY')
        )
        with lob_python.ApiClient(self.configuration) as self.api_client:
            self.camp_api = CampaignsApi(self.api_client)  # noqa: E501
        self.campaign_writable  = CampaignWritable(
            name = uuid.uuid4().hex[:6].upper(),
            schedule_type = CmpScheduleType("immediate"),
        )
        self.camp_id = self.camp_api.create(self.campaign_writable).id
        with lob_python.ApiClient(self.configuration) as self.api_client:
            self.api = UploadsApi(self.api_client)  # noqa: E501

    @classmethod
    def tearDownClass(self):
        for i in self.upload_ids:
            self.api.delete_upload(i)
        self.camp_api.delete(self.camp_id)
        del self.api
        del self.configuration
        del self.upload_ids

    def test_create200(self):
        """Test case for create

        create  # noqa: E501
        """

        upload_writable  = UploadWritable(
            campaign_id = self.camp_id,
            column_mapping = {
                "name": "name",
                "address_line1": "address_line1",
                "address_line2": "address_line2",
                "address_city": "address_city",
                "address_state": "address_state",
                "address_zip": "address_zip",
            },
        )
        created_upload = self.api.create_upload(upload_writable)
        self.upload_ids.append(created_upload.id)
        self.assertIsNotNone(created_upload.id)

    def test_get200(self):
        """Test case for get

        get  # noqa: E501
        """
        upload_writable  = UploadWritable(
            campaign_id = self.camp_id,
            column_mapping = {
                "name": "name",
                "address_line1": "address_line1",
                "address_line2": "address_line2",
                "address_city": "address_city",
                "address_state": "address_state",
                "address_zip": "address_zip",
            },
        )
        created_upload = self.api.create_upload(upload_writable)
        retrieved_upload = self.api.get_upload(created_upload.id)
        self.upload_ids.append(created_upload.id)
        self.assertIsNotNone(retrieved_upload.id)
        self.assertEqual(retrieved_upload.id, created_upload.id)

    def test_get404(self):
        """Test case for get

        get  # noqa: E501
        """
        with self.assertRaises(Exception) as context:
            self.api.get_upload("upl_fake")
        self.assertTrue("Upload not found" in context.exception.__str__())

    def test_update200(self):
        """Test case for get

        get  # noqa: E501
        """
        upload_writable  = UploadWritable(
            campaign_id = self.camp_id,
            column_mapping = {
                "name": "name",
                "address_line1": "address_line1",
                "address_line2": "address_line2",
                "address_city": "address_city",
                "address_state": "address_state",
                "address_zip": "address_zip",
            },
        )
        new_mapping = {
                "name": "name",
                "address_line1": "address_line2",
                "address_line2": "address_line1",
                "address_city": "address_state",
                "address_state": "address_city",
                "address_zip": "address_zip",
            }
        updatable_upload = UploadUpdatable(
            column_mapping = new_mapping
        )
        created_upload = self.api.create_upload(upload_writable)
        updated = self.api.update_upload(created_upload.id, updatable_upload)
        self.upload_ids.append(updated.id)
        self.assertIsNotNone(updated.id)
        self.assertEqual(updated.column_mapping, new_mapping)

    def test_list200(self):
        """Test case for list

        list  # noqa: E501
        """
        upload_writable  = UploadWritable(
            campaign_id = self.camp_id,
            column_mapping = {
                "name": "name",
                "address_line1": "address_line1",
                "address_line2": "address_line2",
                "address_city": "address_city",
                "address_state": "address_state",
                "address_zip": "address_zip",
            },
        )
        writable_upload2 = UploadWritable(
            campaign_id = self.camp_id,
            column_mapping = {
                "name": "name",
                "address_line1": "address_line1",
                "address_line2": "address_line2",
                "address_city": "address_city",
                "address_state": "address_state",
                "address_zip": "address_zip",
            },
        )
        writable_upload3 = UploadWritable(
            campaign_id = self.camp_id,
            column_mapping = {
                "name": "name",
                "address_line1": "address_line1",
                "address_line2": "address_line2",
                "address_city": "address_city",
                "address_state": "address_state",
                "address_zip": "address_zip",
            },
        )

        upload_1 = self.api.create_upload(upload_writable)
        upload_2 = self.api.create_upload(writable_upload2)
        upload_3 = self.api.create_upload(writable_upload3)
        self.upload_ids.append(upload_1.id)
        self.upload_ids.append(upload_2.id)
        self.upload_ids.append(upload_3.id)
        listed_uploads = self.api.list_upload()
        self.assertGreaterEqual(len(listed_uploads.data), 3)
        self.assertIsNotNone(listed_uploads.data[0]['id'])

    def test_delete200(self):
        """Test case for delete

        delete  # noqa: E501
        """
        upload_writable  = UploadWritable(
            campaign_id = self.camp_id,
            column_mapping = {
                "name": "name",
                "address_line1": "address_line1",
                "address_line2": "address_line2",
                "address_city": "address_city",
                "address_state": "address_state",
                "address_zip": "address_zip",
            },
        )
        writable_upload2 = UploadWritable(
            campaign_id = self.camp_id,
            column_mapping = {
                "name": "name",
                "address_line1": "address_line1",
                "address_line2": "address_line2",
                "address_city": "address_city",
                "address_state": "address_state",
                "address_zip": "address_zip",
            },
        )
        writable_upload3 = UploadWritable(
            campaign_id = self.camp_id,
            column_mapping = {
                "name": "name",
                "address_line1": "address_line1",
                "address_line2": "address_line2",
                "address_city": "address_city",
                "address_state": "address_state",
                "address_zip": "address_zip",
            },
        )

        upload_1 = self.api.create_upload(upload_writable)
        upload_2 = self.api.create_upload(writable_upload2)
        upload_3 = self.api.create_upload(writable_upload3)
        self.upload_ids.append(upload_1.id)
        self.upload_ids.append(upload_2.id)
        self.upload_ids.append(upload_3.id)
        listed_uploads = self.api.list_upload()
        self.assertGreaterEqual(len(listed_uploads.data), 3)
        self.assertIsNotNone(listed_uploads.data[0]['id'])

    def test_upload_file(self):
        upload_writable  = UploadWritable(
            campaign_id = self.camp_id,
            column_mapping = {
                "name": "name",
                "address_line1": "address_line1",
                "address_line2": "address_line2",
                "address_city": "address_city",
                "address_state": "address_state",
                "address_zip": "address_zip",
            },
        )
        created_upload = self.api.create_upload(upload_writable)
        self.upload_ids.append(created_upload.id)

        res = self.api.upload_file(created_upload.id, open('test/assets/lobster-family.csv', 'rb'))
        self.assertTrue("File uploaded successfully" in res["message"])

if __name__ == '__main__':
    unittest.main()
