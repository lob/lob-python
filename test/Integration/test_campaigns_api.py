"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: lob-openapi@lob.com
    Generated by: https://openapi-generator.tech
"""


from email.headerregistry import Address
import string
from tkinter.messagebox import NO
import unittest
import warnings
import datetime
import uuid

import lob_python
import os
from dotenv import load_dotenv
from dateutil.parser import *
from lob_python.api.billing_groups_api import BillingGroupsApi  # noqa: E501
from lob_python.model.billing_group_editable import BillingGroupEditable  # noqa: E501
from lob_python.api.campaigns_api import CampaignsApi  # noqa: E501
from lob_python.model.campaign_writable import CampaignWritable  # noqa: E501
from lob_python.model.campaign_updatable import CampaignUpdatable
from lob_python.model.metadata_model import MetadataModel  # noqa: E501
from lob_python.model.cmp_schedule_type import CmpScheduleType
from lob_python.model.cmp_use_type import CmpUseType


class TestCampaignsApi(unittest.TestCase):
    """CampaignsApi unit test stubs"""

    @classmethod
    def setUpClass(self):
        load_dotenv()
        now = datetime.datetime.now()
        warnings.simplefilter("ignore", ResourceWarning)
        self.campaign_ids = []
        self.configuration = lob_python.Configuration(
            username = os.getenv('LOB_API_TEST_KEY')
        )
        with lob_python.ApiClient(self.configuration) as self.api_client:
            self.bg_api = BillingGroupsApi(self.api_client)  # noqa: E501
        self.bg_editable = BillingGroupEditable(
            name = "Test Billing Group for Campaigns"
        )
        self.bg_id = self.bg_api.create(self.bg_editable).id
        with lob_python.ApiClient(self.configuration) as self.api_client:
            self.api = CampaignsApi(self.api_client)  # noqa: E501

    @classmethod
    def tearDownClass(self):
        for i in self.campaign_ids:
            self.api.delete(i)
        del self.api
        del self.configuration
        del self.campaign_ids
        del self.bg_id
        del self.bg_editable

    def test_create200(self):
        """Test case for create

        create  # noqa: E501
        """

        campaign_writable  = CampaignWritable(
            name = uuid.uuid4().hex[:6].upper(),
            schedule_type = CmpScheduleType("immediate"),
        )
        created_campaign = self.api.create(campaign_writable)
        self.campaign_ids.append(created_campaign.id)
        self.assertIsNotNone(created_campaign.id)

    def test_create_full200(self):
        """Test case for create

        create  # noqa: E501
        """
        full_editable = CampaignWritable(
            name = uuid.uuid4().hex[:6].upper(),
            schedule_type = CmpScheduleType("immediate"),
            billing_group_id = self.bg_id,
            description = "lob-openapi Campaign description",
            target_delivery_date = None,
            send_date = None,
            cancel_window_campaign_minutes = 60,
            metadata = MetadataModel(name = "Laurits Hummer"),
            use_type = CmpUseType("operational"),
            auto_cancel_if_ncoa = False,
        )
        created_campaign = self.api.create(full_editable)
        self.campaign_ids.append(created_campaign.id)
        self.assertIsNotNone(created_campaign.id)

    def test_get200(self):
        """Test case for get

        get  # noqa: E501
        """
        campaign_writable  = CampaignWritable(
            name = uuid.uuid4().hex[:6].upper(),
            schedule_type = CmpScheduleType("immediate"),
        )
        created_campaign = self.api.create(campaign_writable)
        retrieved_campaign = self.api.get(created_campaign.id)
        self.campaign_ids.append(created_campaign.id)
        self.assertIsNotNone(retrieved_campaign.id)
        self.assertEqual(retrieved_campaign.id, created_campaign.id)

    def test_get404(self):
        """Test case for get

        get  # noqa: E501
        """
        with self.assertRaises(Exception) as context:
            self.api.get("campaign_fake")
        self.assertTrue("campaign not found" in context.exception.__str__())

    def test_update200(self):
        """Test case for get

        get  # noqa: E501
        """
        campaign_writable  = CampaignWritable(
            name = uuid.uuid4().hex[:6].upper(),
            schedule_type = CmpScheduleType("immediate"),
        )
        updatable_campaign = CampaignUpdatable(
            description = "Updated campaign"
        )
        created_campaign = self.api.create(campaign_writable)
        updated = self.api.update(created_campaign.id, updatable_campaign)
        self.campaign_ids.append(updated.id)
        self.assertIsNotNone(updated.id)
        self.assertEqual(updated.description, "Updated campaign")

    def test_list200(self):
        """Test case for list

        list  # noqa: E501
        """
        campaign_writable  = CampaignWritable(
            name = uuid.uuid4().hex[:6].upper(),
            schedule_type = CmpScheduleType("immediate"),
        )
        writable_campaign2 = CampaignWritable(
            name = uuid.uuid4().hex[:6].upper(),
            schedule_type = CmpScheduleType("immediate"),
        )
        writable_campaign3 = CampaignWritable(
            name = uuid.uuid4().hex[:6].upper(),
            schedule_type = CmpScheduleType("immediate"),
        )

        campaign_1 = self.api.create(campaign_writable)
        campaign_2 = self.api.create(writable_campaign2)
        campaign_3 = self.api.create(writable_campaign3)
        self.campaign_ids.append(campaign_1.id)
        self.campaign_ids.append(campaign_2.id)
        self.campaign_ids.append(campaign_3.id)
        listed_campaigns = self.api.list(limit=2)
        self.assertLessEqual(len(listed_campaigns.data), 2)
        self.assertIsNotNone(listed_campaigns.data[0]['id'])
        next = listed_campaigns.getNextPageToken()

        # perform test with after query param
        if next:
            listed_campaigns_after = self.api.list(limit=2, after=next)
            self.assertEqual(len(listed_campaigns_after.data), 2)
            self.assertIsNotNone(listed_campaigns_after.data[0]['id'])
            prev = listed_campaigns_after.getPreviousPageToken()
            if prev:
                listed_campaigns_before = self.api.list(limit=2, before=prev)
                self.assertLessEqual(len(listed_campaigns_before.data), 2)
                self.assertIsNotNone(listed_campaigns_before.data[0]['id'])

    def test_list422(self):
        """Test case for list

        list  # noqa: E501
        """
        campaign_writable  = CampaignWritable(
            name = uuid.uuid4().hex[:6].upper(),
            schedule_type = CmpScheduleType("immediate"),
        )
        writable_campaign2 = CampaignWritable(
            name = uuid.uuid4().hex[:6].upper(),
            schedule_type = CmpScheduleType("immediate"),
        )
        campaign_1 = self.api.create(campaign_writable)
        campaign_2 = self.api.create(writable_campaign2)
        self.campaign_ids.append(campaign_1.id)
        self.campaign_ids.append(campaign_2.id)
        with self.assertRaises(Exception) as context:
            self.api.list(limit=101)
        self.assertTrue("Invalid value for `limit`" in context.exception.__str__())

    def test_delete200(self):
        """Test case for delete

        delete  # noqa: E501
        """
        campaign_writable  = CampaignWritable(
            name = uuid.uuid4().hex[:6].upper(),
            schedule_type = CmpScheduleType("immediate"),
        )
        created_campaign = self.api.create(campaign_writable)
        deleted_campaign = self.api.delete(created_campaign.id)
        self.assertEqual(deleted_campaign['deleted'], True)

    def test_delete404(self):
        """Test case for delete

        delete  # noqa: E501
        """
        with self.assertRaises(Exception) as context:
            self.api.delete("campaign_fake")
        self.assertTrue("campaign not found" in context.exception.__str__())


if __name__ == '__main__':
    unittest.main()
