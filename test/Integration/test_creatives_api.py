"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: lob-openapi@lob.com
    Generated by: https://openapi-generator.tech
"""


from email.headerregistry import Address
import string
from tkinter.messagebox import NO
import unittest
import warnings
import datetime
import uuid

import lob_python
import os
from dotenv import load_dotenv
from dateutil.parser import *
from lob_python.api.creatives_api import CreativesApi  # noqa: E501
from lob_python.api.campaigns_api import CampaignsApi  # noqa: E501
from lob_python.model.campaign_writable import CampaignWritable  # noqa: E501
from lob_python.model.creative_writable import CreativeWritable  # noqa: E501
from lob_python.model.creative_patch import CreativePatch
from lob_python.model.mail_type import MailType
from lob_python.model.postcard_details_writable import PostcardDetailsWritable
from lob_python.model.letter_details_writable import LetterDetailsWritable
from lob_python.model.metadata_model import MetadataModel  # noqa: E501
from lob_python.model.cmp_schedule_type import CmpScheduleType
from lob_python.model.address_editable import AddressEditable  # noqa: E501

from lob_python.api.templates_api import TemplatesApi  # noqa: E501
from lob_python.model.template_writable import TemplateWritable  # noqa: E501


class TestCreativesApi(unittest.TestCase):
    """CreativesApi unit test stubs"""

    @classmethod
    def setUpClass(self):
        load_dotenv()
        now = datetime.datetime.now()
        warnings.simplefilter("ignore", ResourceWarning)
        self.campaign_ids = []
        self.configuration = lob_python.Configuration(
            username = os.getenv('LOB_API_TEST_KEY')
        )
        with lob_python.ApiClient(self.configuration) as self.api_client:
            self.api = CreativesApi(self.api_client)  # noqa: E501

        with lob_python.ApiClient(self.configuration) as self.api_client:
            self.camp_api = CampaignsApi(self.api_client)  # noqa: E501
        self.campaign_writable  = CampaignWritable(
            name = uuid.uuid4().hex[:6].upper(),
            schedule_type = CmpScheduleType("immediate"),
        )
        self.camp_id = self.camp_api.create(self.campaign_writable).id

        with lob_python.ApiClient(self.configuration) as self.api_client:
            self.temp_api = TemplatesApi(self.api_client)  # noqa: E501

        self.template_writable  = TemplateWritable(
            description = "Test Template 1",
            html = "<html>Updated HTML for template 1</html>"
        )

        self.temp_id = self.temp_api.create(self.template_writable).id

        self._from = AddressEditable(
            name = "FESTER",
            address_line1 = "001 CEMETERY LN",
            address_line2 = "SUITE 666",
            address_city = "WESTFIELD",
            address_state = "NJ",
            address_zip = "07000"
        )

    @classmethod
    def tearDownClass(self):
        del self.api
        del self.configuration
        del self.campaign_ids
        del self.campaign_writable
        del self.template_writable

        self.camp_api.delete(self.camp_id)
        del self.camp_id
        del self.camp_api
        self.temp_api.delete(self.temp_id)
        del self.temp_id
        del self.temp_api

    def test_create_postcard_creative200(self):
        """Test case for create postcard creative

        create  # noqa: E501
        """

        creative_writable = CreativeWritable(
            _from = self._from,
            campaign_id = self.camp_id,
            resource_type = "postcard",
            details = PostcardDetailsWritable(),
            front = self.temp_id,
            back = self.temp_id
        )
        
        created_crv = self.api.create(creative_writable)
        self.assertIsNotNone(created_crv.id)

    def test_create_letter_creative200(self):
        """Test case for create letter creative

        create  # noqa: E501
        """
        creative_writable = CreativeWritable(
            _from = self._from,
            campaign_id = self.camp_id,
            resource_type = "letter",
            details = LetterDetailsWritable(
                cards = ["card_fake"],
                color = True
            ),
            file = self.temp_id
        )
        
        created_crv = self.api.create(creative_writable)
        self.assertIsNotNone(created_crv.id)


    def test_create_full_letter200(self):
        """Test case for create

        create  # noqa: E501
        """
        full_editable = CreativeWritable(
            _from = self._from,
            description = "Full letter creative",
            metadata=MetadataModel(
                key="key_example",
            ),
            campaign_id = self.camp_id,
            resource_type = "letter",
            details = LetterDetailsWritable(
                cards = ["card_fake"],
                color = True,
                mail_type=MailType("usps_first_class"),
                address_placement = "top_first_page",
                double_sided = False,
                return_envelope = True
            ),
            file = self.temp_id
        )
        created_crv = self.api.create(full_editable)
        self.assertIsNotNone(created_crv.id)

    def test_get200(self):
        """Test case for get

        get  # noqa: E501
        """
        creative_writable = CreativeWritable(
            _from = self._from,
            campaign_id = self.camp_id,
            resource_type = "letter",
            details = LetterDetailsWritable(
                cards = ["card_fake"],
                color = True
            ),
            file = self.temp_id
        )
        created_crv = self.api.create(creative_writable)
        retrieved_crv = self.api.get(created_crv.id)
        self.assertIsNotNone(retrieved_crv.id)
        self.assertEqual(retrieved_crv.id, created_crv.id)


    def test_get404(self):
        """Test case for get

        get  # noqa: E501
        """
        with self.assertRaises(Exception) as context:
            self.api.get("crv_fake")
        self.assertTrue("creative not found" in context.exception.__str__())

    def test_update200(self):
        """Test case for get

        get  # noqa: E501
        """
        creative_writable  = CreativeWritable(
            _from = self._from,
            campaign_id = self.camp_id,
            resource_type = "postcard",
            details = PostcardDetailsWritable(),
            front = self.temp_id,
            back = self.temp_id
        )

        updatable_creative = CreativePatch(
            description = "Updated creative"
        )
        created_crv = self.api.create(creative_writable)
        updated = self.api.update(created_crv.id, updatable_creative)
        self.campaign_ids.append(updated.id)
        self.assertIsNotNone(updated.id)
        self.assertEqual(updated.description, "Updated creative")


if __name__ == '__main__':
    unittest.main()
