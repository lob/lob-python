"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: lob-openapi@lob.com
    Generated by: https://openapi-generator.tech
"""


import unittest
import warnings

import lob_python
import os
from dotenv import load_dotenv
from lob_python.api.us_verifications_api import UsVerificationsApi
from lob_python.model.address import Address  # noqa: E501
from lob_python.model.us_verifications_writable import UsVerificationsWritable  # noqa: E501
from lob_python.model.multiple_components import MultipleComponents  # noqa: E501
from lob_python.model.multiple_components_list import MultipleComponentsList  # noqa: E501

class TestUsVerificationsApi(unittest.TestCase):
    """UsVerificationsApi unit test stubs"""

    @classmethod
    def setUpClass(self):
        self.api = UsVerificationsApi()  # noqa: E501
        load_dotenv()
        warnings.simplefilter("ignore", ResourceWarning)
        self.configuration = lob_python.Configuration(
            username = os.getenv('LOB_API_LIVE_KEY')
        )
        with lob_python.ApiClient(self.configuration) as self.api_client:
            self.api = UsVerificationsApi(self.api_client)  # noqa: E501
        self.valid_address = UsVerificationsWritable(
            primary_line = "210 KING ST",
            city = "SAN FRANCISCO",
            state = "CA",
            zip_code = "94107"
        )
        self.invalid_address = UsVerificationsWritable(
            primary_line = "1 CEMETERY ST",
            city = "POTATOFIELD",
            state = "NJ",
            zip_code = "07000"
        )
        self.mc1 = MultipleComponents(
            primary_line = "210 KING ST",
            city = "SAN FRANCISCO",
            state = "CA",
            zip_code = "94107"
        )
        self.mc2 = MultipleComponents(
            primary_line = "001 CEMETERY LN",
            secondary_line = "SUITE 666",
            city = "WESTFIELD",
            state = "NJ",
            zip_code = "07000"
        )
        self.mc_error = MultipleComponents(
            primary_line = "210 KING ST",
            zip_code = "ABCDE"
        )
        self.address_list = MultipleComponentsList(
            addresses = [self.mc1, self.mc2]
        )

        self.error_address_list = MultipleComponentsList(
            addresses = [self.mc1, self.mc_error]
        )

    @classmethod
    def tearDownClass(self):
        del self.valid_address
        del self.mc1
        del self.mc2
        del self.mc_error
        del self.address_list
        del self.error_address_list
        del self.api
        del self.configuration

    def test_401(self):
        """Test case for bulk verify with status code 401"""
        configuration = lob_python.Configuration(
            username = "Totally fake key"
        )
        with lob_python.ApiClient(configuration) as api_client:
            invalid_api = UsVerificationsApi(api_client)  # noqa: E501

        with self.assertRaises(Exception) as context:
            invalid_api.verifyBulk(self.address_list)
        self.assertTrue("Your API key is not valid" in context.exception.__str__())

    def test_verifyBulk200(self):
        """Test case for verifyBulk

        verifyBulk  # noqa: E501
        """
        verified_list = self.api.verifyBulk(self.address_list)
        self.assertEqual(len(verified_list.addresses), 2)
        self.assertEqual(verified_list.addresses[0]['deliverability'], "deliverable")
        self.assertEqual(verified_list.addresses[1]['deliverability'], "undeliverable")

    def test_verifyBulk_error(self):
        """Test case for verifyBulk

        verifyBulk  # noqa: E501
        """
        expected_error = {
            'error': {
               'message': 'zip_code must be in a valid zip or zip+4 format',
               'status_code': 422
            }
        }
        verified_list = self.api.verifyBulk(self.error_address_list)
        self.assertEqual(len(verified_list.addresses), 2)
        self.assertEqual(verified_list.addresses[1], expected_error)
        self.assertEqual(verified_list.errors, True)

    def test_verifySingle_deliverable(self):
        """Test case for verifySingle

        verifySingle  # noqa: E501
        """
        verified_address = self.api.verifySingle(self.valid_address)
        self.assertEqual(verified_address.deliverability, "deliverable")

    def test_verifySingle_undeliverable(self):
        """Test case for verifySingle

        verifySingle  # noqa: E501
        """
        verified_address = self.api.verifySingle(self.invalid_address)
        self.assertEqual(verified_address.deliverability, "undeliverable")

if __name__ == '__main__':
    unittest.main()
