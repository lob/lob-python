"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: lob-openapi@lob.com
    Generated by: https://openapi-generator.tech
"""


from email.headerregistry import Address
import string
import unittest
import warnings
from lob_python.model.chk_use_type import ChkUseType
from unittest_data_provider import data_provider
import datetime as dt

import lob_python
import os
from dotenv import load_dotenv
from dateutil.parser import *
from lob_python.api.checks_api import ChecksApi  # noqa: E501
from lob_python.model.mail_type import MailType  # noqa: E501
from lob_python.model.sort_by3 import SortBy3
from lob_python.model.country_extended import CountryExtended
from lob_python.model.merge_variables import MergeVariables  # noqa: E501
from lob_python.model.metadata_model import MetadataModel  # noqa: E501
from lob_python.model.check_editable import CheckEditable  # noqa: E501
from lob_python.model.address_domestic import AddressDomestic  # noqa: E501
from lob_python.model.address_editable import AddressEditable  # noqa: E501
from lob_python.api.bank_accounts_api import BankAccountsApi  # noqa: E501
from lob_python.model.bank_account_writable import BankAccountWritable  # noqa: E501
from lob_python.model.bank_account_verify import BankAccountVerify  # noqa: E501
from lob_python.model.bank_type_enum import BankTypeEnum  # noqa: E501
from lob_python.api.addresses_api import AddressesApi

# limit, before, after, include, date_created, metadata, scheduled, send_date, mail_type, sort_by
last_month = dt.datetime.combine(
    dt.datetime.now() - dt.timedelta(weeks=4),
    dt.datetime.min.time()
)
class TestChecksApi(unittest.TestCase):
    """ChecksApi unit test stubs"""
    query_params = lambda: (
        (None, None, None, ["total_count"], None, None, None, None, None, None),
        (None, None, None, None, {"gt": last_month}, None, None, None, None, None),
        (None, None, None, None, None, MetadataModel(key = "key_example"), None, None, None, None),
        (None, None, None, None, None, None, True, None, None, None),
        (None, None, None, None, None, None, None, {"gt": last_month.strftime("%Y-%m-%dT%H:%M:%S%z")}, None, None),
        (None, None, None, None, None, None, None, None, MailType("usps_first_class"), None),
        (None, None, None, None, None, None, None, None, None, SortBy3(date_created="asc")),
    )

    @classmethod
    def setUpClass(self):
        load_dotenv()
        now = dt.datetime.now()
        warnings.simplefilter("ignore", ResourceWarning)
        self.chk_ids = []
        self.bank_ids = []
        self.configuration = lob_python.Configuration(
            username = os.getenv('LOB_API_TEST_KEY')
        )
        with lob_python.ApiClient(self.configuration) as self.api_client:
            self.api = ChecksApi(self.api_client)  # noqa: E501
        with lob_python.ApiClient(self.configuration) as self.api_client:
            self.bank_api = BankAccountsApi(self.api_client)  # noqa: E501
        self.bank_verify = BankAccountVerify(
            amounts = [11, 35]
        )

        self.bank_writable = BankAccountWritable(
            routing_number = "322271627",
            account_number = "123456789",
            signatory = "Sigourney Lobster",
            account_type = BankTypeEnum("individual")
        )
        created_bank = self.bank_api.create(self.bank_writable)
        verified_bank_acc = self.bank_api.verify(created_bank.id, self.bank_verify)
        self.bank_ids.append(verified_bank_acc.id)

        created_bank2 = self.bank_api.create(self.bank_writable)
        self.bank_ids.append(created_bank2.id)

        self.to_address = AddressDomestic(
            name = "THING T. THING",
            address_line1 = "1313 CEMETERY LN",
            address_city = "WESTFIELD",
            address_state = "NJ",
            address_zip = "07000"
        )
        self.to2 = AddressDomestic(
            name = "FESTER",
            address_line1 = "001 CEMETERY LN",
            address_line2 = "SUITE 666",
            address_city = "WESTFIELD",
            address_state = "NJ",
            address_zip = "07000"
        )
        self.check_editable = CheckEditable(
            to = self.to_address,
            message = "Test Check 1",
            bank_account = self.bank_ids[0],
            _from = self.to2,
            amount = 100.0,
            use_type = ChkUseType("marketing")
        )

        self.full_editable = CheckEditable(
            to = self.to_address,
            bank_account = self.bank_ids[0],
            _from = self.to2,
            amount = 100.0,
            metadata=MetadataModel(
                key="key_example",
            ),
            mail_type="usps_first_class",
            merge_variables=MergeVariables(),
            send_date=now + dt.timedelta(days=30),
            memo = "Test Check Memo",
            check_number = 2,
            logo = "https://s3.us-west-2.amazonaws.com/public.lob.com/assets/check_logo.png",
            check_bottom = "https://s3.us-west-2.amazonaws.com/public.lob.com/lobcom/template_gallery/gtmpl_6a8930ca92bc81_Rebate_Check.html",
            attachment = "https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/check_attachment_template.pdf",
            use_type = ChkUseType("marketing")
        )

        self.check_editable2 = CheckEditable(
            to = self.to_address,
            message = "Test Check 2",
            bank_account = self.bank_ids[0],
            _from = self.to2,
            amount = 100.0,
            use_type = ChkUseType("marketing")
        )

        self.check_editable3 = CheckEditable(
            to = self.to_address,
            message = "Test Check 3",
            bank_account = self.bank_ids[0],
            _from = self.to2,
            amount = 100.0,
            use_type = ChkUseType("marketing")
        )

    @classmethod
    def tearDownClass(self):
        for i in self.chk_ids:
            self.api.cancel(i)
        del self.to_address
        del self.to2
        del self.bank_writable
        del self.bank_verify
        del self.check_editable
        del self.full_editable
        del self.check_editable2
        del self.check_editable3
        del self.api

        for i in self.bank_ids:
            self.bank_api.delete(i)
        del self.bank_ids
        del self.bank_api
        del self.configuration

    def tearDown(self):
        for i in self.chk_ids:
            self.api.cancel(i)

    def test_401(self):
        """Test case for create with status code 401"""
        configuration = lob_python.Configuration(
            username = "Totally fake key"
        )
        with lob_python.ApiClient(configuration) as api_client:
            invalid_api = ChecksApi(api_client)  # noqa: E501

        with self.assertRaises(Exception) as context:
            invalid_api.create(self.check_editable)
        self.assertTrue("Your API key is not valid" in context.exception.__str__())

    def test_create404(self):
        created_bank = self.bank_api.create(self.bank_writable)
        verified_bank_acc = self.bank_api.verify(created_bank.id, self.bank_verify)
        self.bank_api.delete(verified_bank_acc.id)
        invalid_check_editable = CheckEditable(
            to = self.to_address,
            message = "Test Check 1",
            bank_account = verified_bank_acc.id,
            _from = self.to2,
            amount = 100.0,
            use_type = ChkUseType("marketing")
        )
        with self.assertRaises(Exception) as context:
            created_check = self.api.create(invalid_check_editable)
        self.assertTrue("check cannot be created with a deleted bank account" in context.exception.__str__())

    def test_create422_deleted_addr(self):
        with lob_python.ApiClient(self.configuration) as api_client:
            addresses_api = AddressesApi(api_client)  # noqa: E501

        to_address = AddressEditable(
            name = "THING T. THING",
            address_line1 = "1313 CEMETERY LN",
            address_city = "WESTFIELD",
            address_state = "NJ",
            address_zip = "07000"
        )
        addr = addresses_api.create(to_address)
        addresses_api.delete(addr.id)
        invalid_check_editable = CheckEditable(
            to = addr.id,
            message = "Test Check 1",
            bank_account = self.bank_ids[0],
            _from = self.to2,
            amount = 100.0,
            use_type = ChkUseType("marketing")
        )
        with self.assertRaises(Exception) as context:
            created_check = self.api.create(invalid_check_editable)
        self.assertTrue("deleted addresses can not be used" in context.exception.__str__())

    def test_create422_unverified_bank_acc(self):
        """Test case for create

        create  # noqa: E501
        """
        invalid_check_editable = CheckEditable(
            to = self.to_address,
            message = "Test Check 1",
            bank_account = self.bank_ids[1],
            _from = self.to2,
            amount = 100.0,
            use_type = ChkUseType("marketing")
        )
        with self.assertRaises(Exception) as context:
            created_check = self.api.create(invalid_check_editable)
        self.assertTrue("check cannot be created with an unverified bank account" in context.exception.__str__())

    def test_create200(self):
        """Test case for create

        create  # noqa: E501
        """
        created_check = self.api.create(self.check_editable)
        self.chk_ids.append(created_check.id)
        self.assertIsNotNone(created_check.id)

    def test_create_full200(self):
        """Test case for create

        create  # noqa: E501
        """
        created_check = self.api.create(self.full_editable)
        self.chk_ids.append(created_check.id)
        self.assertIsNotNone(created_check.id)

    def test_get200(self):
        """Test case for get

        get  # noqa: E501
        """
        created_check = self.api.create(self.check_editable)
        retrieved_check = self.api.get(created_check.id)
        self.chk_ids.append(created_check.id)
        self.assertIsNotNone(retrieved_check.id)
        self.assertEqual(retrieved_check.id, created_check.id)

    def test_get404(self):
        """Test case for get

        get  # noqa: E501
        """
        with self.assertRaises(Exception) as context:
            self.api.get("chk_fake")
        self.assertTrue("check not found" in context.exception.__str__())

    def test_list200(self):
        """Test case for list

        list  # noqa: E501
        """

        check_1 = self.api.create(self.check_editable)
        check_2 = self.api.create(self.check_editable2)
        check_3 = self.api.create(self.check_editable3)
        self.chk_ids.append(check_1.id)
        self.chk_ids.append(check_2.id)
        self.chk_ids.append(check_3.id)
        listed_checks = self.api.list(limit=2)
        self.assertLessEqual(len(listed_checks.data), 2)
        self.assertIsNotNone(listed_checks.data[0]['id'])
        next = listed_checks.getNextPageToken()

        # perform test with after query param
        if next:
            listed_checks_after = self.api.list(limit=2, after=next)
            self.assertEqual(len(listed_checks_after.data), 2)
            self.assertIsNotNone(listed_checks_after.data[0]['id'])
            prev = listed_checks_after.getPreviousPageToken()
            if prev:
                listed_checks_before = self.api.list(limit=2, before=prev)
                self.assertLessEqual(len(listed_checks_before.data), 2)
                self.assertIsNotNone(listed_checks_before.data[0]['id'])

    @data_provider(query_params)
    def test_list_other_query_params(self, limit, before, after, include, date_created, metadata, scheduled, send_date, mail_type, sort_by):
        """Test case for list with other params"""
        args = {}
        if limit:
            args["limit"] = limit

        if before:
            args["before"] = before

        if after:
            args["after"] = after

        if include:
            args["include"] = include

        if date_created:
            args["date_created"] = date_created

        if metadata:
            args["metadata"] = metadata

        if scheduled:
            args["scheduled"] = scheduled

        if send_date:
            args["send_date"] = send_date

        if mail_type:
            args["mail_type"] = mail_type

        if sort_by:
            args["sort_by"] = sort_by
        response = self.api.list(**args)

        self.assertGreaterEqual(len(response["data"]), 0)
        if include:
            self.assertIsNotNone(response["total_count"])

    def test_list422(self):
        """Test case for list

        list  # noqa: E501
        """

        check_1 = self.api.create(self.check_editable)
        check_2 = self.api.create(self.check_editable2)
        self.chk_ids.append(check_1.id)
        self.chk_ids.append(check_2.id)
        with self.assertRaises(Exception) as context:
            self.api.list(limit=101)
        self.assertTrue("Invalid value for `limit`" in context.exception.__str__())

    def test_delete200(self):
        """Test case for delete

        delete  # noqa: E501
        """
        created_check = self.api.create(self.check_editable)
        cancelled_check = self.api.cancel(created_check.id)
        self.assertEqual(cancelled_check.deleted, True)

    def test_delete404(self):
        """Test case for delete

        delete  # noqa: E501
        """
        with self.assertRaises(Exception) as context:
            self.api.cancel("chk_fake")
        self.assertTrue("check not found" in context.exception.__str__())

if __name__ == '__main__':
    unittest.main()
