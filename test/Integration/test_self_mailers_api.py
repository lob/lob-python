"""
    Lob

    The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: lob-openapi@lob.com
    Generated by: https://openapi-generator.tech
"""


from email.headerregistry import Address
import string
import unittest
from lob_python.model.sfm_use_type import SfmUseType
from unittest_data_provider import data_provider
import warnings
import datetime as dt

import lob_python
import os
from dotenv import load_dotenv
from dateutil.parser import *
from lob_python.api.addresses_api import AddressesApi  # noqa: E501
from lob_python.api.self_mailers_api import SelfMailersApi  # noqa: E501
from lob_python.model.self_mailer_size import SelfMailerSize  # noqa: E501
from lob_python.model.mail_type import MailType  # noqa: E501
from lob_python.model.sort_by3 import SortBy3
from lob_python.model.merge_variables import MergeVariables  # noqa: E501
from lob_python.model.metadata_model import MetadataModel  # noqa: E501
from lob_python.model.self_mailer_editable import SelfMailerEditable  # noqa: E501
from lob_python.model.self_mailer_size import SelfMailerSize  # noqa: E501
from lob_python.model.address_editable import AddressEditable  # noqa: E501
from lob_python.model.country_extended import CountryExtended

last_month = dt.datetime.combine(
    dt.datetime.now() - dt.timedelta(weeks=4),
    dt.datetime.min.time()
)

class TestSelfMailersApi(unittest.TestCase):
    """SelfMailersApi unit test stubs"""
    # limit, before, after, include, date_created, metadata, size, scheduled, send_date, mail_type, sort_by
    query_params = lambda: (
        (None, None, None, ["total_count"], None, None, None, None, None, None, None),
        (None, None, None, None, {"gt": last_month}, None, None, None, None, None, None),
        (None, None, None, None, None, MetadataModel(key = "key_example"), None, None, None, None, None),
        (None, None, None, None, None, None, [SelfMailerSize("6x18_bifold")], None, None, None, None),
        (None, None, None, None, None, None, None, True, None, None, None),
        (None, None, None, None, None, None, None, None, {"gt": last_month.strftime("%Y-%m-%dT%H:%M:%S%z")}, None, None),
        (None, None, None, None, None, None, None, None, None, MailType("usps_first_class"), None),
        (None, None, None, None, None, None, None, None, None, None, SortBy3(date_created="asc")),
    )

    @classmethod
    def setUpClass(self):
        load_dotenv()
        now = dt.datetime.now()
        warnings.simplefilter("ignore", ResourceWarning)
        self.sfm_ids = []
        self.configuration = lob_python.Configuration(
            username = os.getenv('LOB_API_TEST_KEY')
        )
        with lob_python.ApiClient(self.configuration) as self.api_client:
            self.api = SelfMailersApi(self.api_client)  # noqa: E501

        self.size = SelfMailerSize("6x18_bifold")
        self.to_address = AddressEditable(
            name = "THING T. THING",
            address_line1 = "1313 CEMETERY LN",
            address_city = "WESTFIELD",
            address_state = "NJ",
            address_zip = "07000",
            address_country = CountryExtended("US")
        )
        self.self_mailer_editable = SelfMailerEditable(
            to = self.to_address,
            inside = "https://s3.us-west-2.amazonaws.com/public.lob.com/assets/templates/self_mailers/6x18_sfm_inside.pdf",
            outside = "https://s3.us-west-2.amazonaws.com/public.lob.com/assets/templates/self_mailers/6x18_sfm_inside.pdf",
            use_type= SfmUseType("marketing")
        )
        self.to2 = AddressEditable(
            name = "FESTER",
            address_line1 = "001 CEMETERY LN",
            address_line2 = "SUITE 666",
            address_city = "WESTFIELD",
            address_state = "NJ",
            address_zip = "07000",
            address_country = CountryExtended("US")
        )

        self.full_editable = SelfMailerEditable(
            to = self.to_address,
            _from = self.to2,
            size = self.size,
            description = "Dummy self-mailer",
            metadata=MetadataModel(
                key="key_example",
            ),
            mail_type=MailType("usps_first_class"),
            merge_variables=MergeVariables(),
            send_date=now + dt.timedelta(days=30),
            inside = "https://s3.us-west-2.amazonaws.com/public.lob.com/assets/templates/self_mailers/6x18_sfm_inside.pdf",
            outside = "https://s3.us-west-2.amazonaws.com/public.lob.com/assets/templates/self_mailers/6x18_sfm_inside.pdf",
            billing_group_id = "bg_5c79d158d8f69e3e0",
            use_type= SfmUseType("marketing")
        )

        self.editable_self_mailer2 = SelfMailerEditable(
            to = self.to2,
            inside = "https://s3.us-west-2.amazonaws.com/public.lob.com/assets/templates/self_mailers/6x18_sfm_inside.pdf",
            outside = "https://s3.us-west-2.amazonaws.com/public.lob.com/assets/templates/self_mailers/6x18_sfm_inside.pdf",
            use_type= SfmUseType("marketing")
        )

        self.to3 = AddressEditable(
            name = "FESTER",
            address_line1 = "666 CEMETERY LN",
            address_line2 = "SUITE 0",
            address_city = "WESTFIELD",
            address_state = "NJ",
            address_zip = "07000",
            address_country = CountryExtended("US")
        )

        self.editable_self_mailer3 = SelfMailerEditable(
            to = self.to3,
            inside = "https://s3.us-west-2.amazonaws.com/public.lob.com/assets/templates/self_mailers/6x18_sfm_inside.pdf",
            outside = "https://s3.us-west-2.amazonaws.com/public.lob.com/assets/templates/self_mailers/6x18_sfm_inside.pdf",
            use_type= SfmUseType("marketing")
        )

        with lob_python.ApiClient(self.configuration) as api_client:
            addr_api = AddressesApi(api_client)  # noqa: E501
        deleted_addr = addr_api.create(self.to3)
        addr_api.delete(deleted_addr.id)
        self.deleted_addr_id = deleted_addr.id

    @classmethod
    def tearDownClass(self):
        for i in self.sfm_ids:
            self.api.delete(i)
        del self.to_address
        del self.to2
        del self.to3
        del self.self_mailer_editable
        del self.editable_self_mailer2
        del self.editable_self_mailer3
        del self.full_editable
        del self.sfm_ids
        del self.api
        del self.configuration
        del self.deleted_addr_id

    def tearDown(self):
        for i in self.sfm_ids:
            self.api.delete(i)
        pass

    def test_401(self):
        """Test case for create with status code 401"""
        configuration = lob_python.Configuration(
            username = "Totally fake key"
        )
        with lob_python.ApiClient(configuration) as api_client:
            invalid_api = SelfMailersApi(api_client)  # noqa: E501

        with self.assertRaises(Exception) as context:
            invalid_api.create(self.self_mailer_editable)
        self.assertTrue("Your API key is not valid" in context.exception.__str__())

    def test_create200(self):
        """Test case for create

        create  # noqa: E501
        """
        created_self_mailer = self.api.create(self.self_mailer_editable)
        self.sfm_ids.append(created_self_mailer.id)
        self.assertIsNotNone(created_self_mailer.id)

    def test_create_inline200(self):
        """Test case for create

        create  # noqa: E501
        """
        self_mailer_editable_html = SelfMailerEditable(
            to = self.to_address,
            inside = "<html style='padding: 1in; font-size: 50;'>Inside HTML </html>",
            outside = "<html style='padding: 1in; font-size: 50;'>Outside HTML </html>",
            use_type= SfmUseType("marketing")
        )
        created_self_mailer = self.api.create(self_mailer_editable_html)
        self.sfm_ids.append(created_self_mailer.id)
        self.assertIsNotNone(created_self_mailer.id)

    def test_create_full200(self):
        """Test case for create

        create  # noqa: E501
        """
        created_self_mailer = self.api.create(self.full_editable)
        self.sfm_ids.append(created_self_mailer.id)
        self.assertIsNotNone(created_self_mailer.id)

    def test_create422_intl_from(self):
        """Test case for create
        create  # noqa: E501
        """
        intl_addr = AddressEditable(
            name = "INTL ADDRESS",
            address_line1 = "35 TOWER HILL",
            address_city = "LONDON",
            address_country = CountryExtended("GB")
        )

        invalid_self_mailer_editable = SelfMailerEditable(
            to = self.to_address,
            _from = intl_addr,
            inside = "https://s3.us-west-2.amazonaws.com/public.lob.com/assets/templates/self_mailers/6x18_sfm_inside.pdf",
            outside = "https://s3.us-west-2.amazonaws.com/public.lob.com/assets/templates/self_mailers/6x18_sfm_inside.pdf",
            use_type= SfmUseType("marketing")
        )

        with self.assertRaises(Exception) as context:
            self.api.create(invalid_self_mailer_editable)
        self.assertTrue("The 'from' address must be a US address" in context.exception.__str__())

    def test_create422_deleted_address(self):
        """Test case for create
        create  # noqa: E501
        """
        invalid_self_mailer_editable = SelfMailerEditable(
            to = self.deleted_addr_id,
            inside = "https://s3.us-west-2.amazonaws.com/public.lob.com/assets/templates/self_mailers/6x18_sfm_inside.pdf",
            outside = "https://s3.us-west-2.amazonaws.com/public.lob.com/assets/templates/self_mailers/6x18_sfm_inside.pdf",
            use_type= SfmUseType("marketing")
        )

        with self.assertRaises(Exception) as context:
            self.api.create(invalid_self_mailer_editable)
        self.assertTrue("deleted addresses can not be used" in context.exception.__str__())

    def test_get200(self):
        """Test case for get

        get  # noqa: E501
        """
        created_self_mailer = self.api.create(self.self_mailer_editable)
        retrieved_self_mailer = self.api.get(created_self_mailer.id)
        self.sfm_ids.append(created_self_mailer.id)
        self.assertIsNotNone(retrieved_self_mailer.id)
        self.assertEqual(retrieved_self_mailer.id, created_self_mailer.id)

    def test_get404(self):
        """Test case for get

        get  # noqa: E501
        """
        with self.assertRaises(Exception) as context:
            self.api.get("sfm_fake")
        self.assertTrue("self mailer not found" in context.exception.__str__())

    def test_list200(self):
        """Test case for list

        list  # noqa: E501
        """
        sfm_1 = self.api.create(self.self_mailer_editable)
        sfm_2 = self.api.create(self.editable_self_mailer2)
        sfm_3 = self.api.create(self.editable_self_mailer3)
        self.sfm_ids.append(sfm_1.id)
        self.sfm_ids.append(sfm_2.id)
        self.sfm_ids.append(sfm_3.id)
        listed_self_mailers = self.api.list(limit=2)
        self.assertLessEqual(len(listed_self_mailers.data), 2)
        self.assertIsNotNone(listed_self_mailers.data[0]['id'])
        next = listed_self_mailers.getNextPageToken()

        # perform test with after query param
        if next:
            listed_self_mailers_after = self.api.list(limit=2, after=next)
            self.assertEqual(len(listed_self_mailers_after.data), 2)
            self.assertIsNotNone(listed_self_mailers_after.data[0]['id'])
            prev = listed_self_mailers_after.getPreviousPageToken()
            if prev:
                listed_self_mailers_before = self.api.list(limit=2, before=prev)
                self.assertLessEqual(len(listed_self_mailers_before.data), 2)
                self.assertIsNotNone(listed_self_mailers_before.data[0]['id'])

    @data_provider(query_params)
    def test_list_other_query_params(self, limit, before, after, include, date_created, metadata, size, scheduled, send_date, mail_type, sort_by):
        """Test case for list with other params"""
        args = {}
        if limit:
            args["limit"] = limit

        if before:
            args["before"] = before

        if after:
            args["after"] = after

        if include:
            args["include"] = include

        if date_created:
            args["date_created"] = date_created

        if metadata:
            args["metadata"] = metadata

        if size:
            args["size"] = size

        if scheduled:
            args["scheduled"] = scheduled

        if send_date:
            args["send_date"] = send_date

        if mail_type:
            args["mail_type"] = mail_type

        if sort_by:
            args["sort_by"] = sort_by
        response = self.api.list(**args)

        self.assertGreaterEqual(len(response["data"]), 0)
        if include:
            self.assertIsNotNone(response["total_count"])

    def test_list422(self):
        """Test case for list

        list  # noqa: E501
        """

        sfm_1 = self.api.create(self.self_mailer_editable)
        sfm_2 = self.api.create(self.editable_self_mailer2)
        self.sfm_ids.append(sfm_1.id)
        self.sfm_ids.append(sfm_2.id)
        with self.assertRaises(Exception) as context:
            self.api.list(limit=101)
        self.assertTrue("Invalid value for `limit`" in context.exception.__str__())

    def test_delete200(self):
        """Test case for delete

        delete  # noqa: E501
        """
        created_self_mailer = self.api.create(self.self_mailer_editable)
        deleted_self_mailer = self.api.delete(created_self_mailer.id)
        self.assertEqual(deleted_self_mailer.deleted, True)

    def test_delete404(self):
        """Test case for delete

        delete  # noqa: E501
        """
        with self.assertRaises(Exception) as context:
            self.api.delete("sfm_fake")
        self.assertTrue("self mailer not found" in context.exception.__str__())


if __name__ == '__main__':
    unittest.main()
